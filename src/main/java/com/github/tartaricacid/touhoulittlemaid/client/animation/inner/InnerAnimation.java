package com.github.tartaricacid.touhoulittlemaid.client.animation.inner;

import com.github.tartaricacid.touhoulittlemaid.client.animation.script.ModelRendererWrapper;
import com.github.tartaricacid.touhoulittlemaid.entity.item.*;
import com.github.tartaricacid.touhoulittlemaid.entity.passive.EntityMaid;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import org.apache.commons.lang3.time.DateFormatUtils;

import java.util.*;

public final class InnerAnimation {
    private static final HashMap<ResourceLocation, IAnimation<?>> INNER_ANIMATION = Maps.newHashMap();
    private static final Set<String> SPRING_FESTIVAL = Sets.newHashSet("1900-01-29", "1900-01-30", "1900-01-31", "1900-02-01", "1900-02-02", "1900-02-03", "1900-02-04", "1900-02-05", "1901-02-17", "1901-02-18", "1901-02-19", "1901-02-20", "1901-02-21", "1901-02-22", "1901-02-23", "1901-02-24", "1902-02-07", "1902-02-08", "1902-02-09", "1902-02-10", "1902-02-11", "1902-02-12", "1902-02-13", "1903-01-27", "1903-01-28", "1903-01-29", "1903-01-30", "1903-01-31", "1903-02-01", "1903-02-02", "1903-02-03", "1904-02-14", "1904-02-15", "1904-02-16", "1904-02-17", "1904-02-18", "1904-02-19", "1904-02-20", "1904-02-21", "1905-02-03", "1905-02-04", "1905-02-05", "1905-02-06", "1905-02-07", "1905-02-08", "1905-02-09", "1906-01-23", "1906-01-24", "1906-01-25", "1906-01-26", "1906-01-27", "1906-01-28", "1906-01-29", "1906-01-30", "1907-02-11", "1907-02-12", "1907-02-13", "1907-02-14", "1907-02-15", "1907-02-16", "1907-02-17", "1907-02-18", "1908-02-01", "1908-02-02", "1908-02-03", "1908-02-04", "1908-02-05", "1908-02-06", "1908-02-07", "1909-01-20", "1909-01-21", "1909-01-22", "1909-01-23", "1909-01-24", "1909-01-25", "1909-01-26", "1909-01-27", "1910-02-08", "1910-02-09", "1910-02-10", "1910-02-11", "1910-02-12", "1910-02-13", "1910-02-14", "1910-02-15", "1911-01-29", "1911-01-30", "1911-01-31", "1911-02-01", "1911-02-02", "1911-02-03", "1911-02-04", "1912-02-16", "1912-02-17", "1912-02-18", "1912-02-19", "1912-02-20", "1912-02-21", "1912-02-22", "1912-02-23", "1913-02-04", "1913-02-05", "1913-02-06", "1913-02-07", "1913-02-08", "1913-02-09", "1913-02-10", "1913-02-11", "1914-01-24", "1914-01-25", "1914-01-26", "1914-01-27", "1914-01-28", "1914-01-29", "1914-01-30", "1914-01-31", "1915-02-12", "1915-02-13", "1915-02-14", "1915-02-15", "1915-02-16", "1915-02-17", "1915-02-18", "1915-02-19", "1916-02-02", "1916-02-03", "1916-02-04", "1916-02-05", "1916-02-06", "1916-02-07", "1916-02-08", "1917-01-22", "1917-01-23", "1917-01-24", "1917-01-25", "1917-01-26", "1917-01-27", "1917-01-28", "1918-02-10", "1918-02-11", "1918-02-12", "1918-02-13", "1918-02-14", "1918-02-15", "1918-02-16", "1919-01-30", "1919-01-31", "1919-02-01", "1919-02-02", "1919-02-03", "1919-02-04", "1919-02-05", "1919-02-06", "1920-02-18", "1920-02-19", "1920-02-20", "1920-02-21", "1920-02-22", "1920-02-23", "1920-02-24", "1920-02-25", "1921-02-06", "1921-02-07", "1921-02-08", "1921-02-09", "1921-02-10", "1921-02-11", "1921-02-12", "1921-02-13", "1922-01-26", "1922-01-27", "1922-01-28", "1922-01-29", "1922-01-30", "1922-01-31", "1922-02-01", "1922-02-02", "1923-02-14", "1923-02-15", "1923-02-16", "1923-02-17", "1923-02-18", "1923-02-19", "1923-02-20", "1923-02-21", "1924-02-03", "1924-02-04", "1924-02-05", "1924-02-06", "1924-02-07", "1924-02-08", "1924-02-09", "1924-02-10", "1925-01-23", "1925-01-24", "1925-01-25", "1925-01-26", "1925-01-27", "1925-01-28", "1925-01-29", "1926-02-11", "1926-02-12", "1926-02-13", "1926-02-14", "1926-02-15", "1926-02-16", "1926-02-17", "1926-02-18", "1927-02-01", "1927-02-02", "1927-02-03", "1927-02-04", "1927-02-05", "1927-02-06", "1927-02-07", "1928-01-21", "1928-01-22", "1928-01-23", "1928-01-24", "1928-01-25", "1928-01-26", "1928-01-27", "1928-01-28", "1929-02-08", "1929-02-09", "1929-02-10", "1929-02-11", "1929-02-12", "1929-02-13", "1929-02-14", "1929-02-15", "1930-01-28", "1930-01-29", "1930-01-30", "1930-01-31", "1930-02-01", "1930-02-02", "1930-02-03", "1930-02-04", "1931-02-16", "1931-02-17", "1931-02-18", "1931-02-19", "1931-02-20", "1931-02-21", "1931-02-22", "1932-02-05", "1932-02-06", "1932-02-07", "1932-02-08", "1932-02-09", "1932-02-10", "1932-02-11", "1933-01-24", "1933-01-25", "1933-01-26", "1933-01-27", "1933-01-28", "1933-01-29", "1933-01-30", "1933-01-31", "1934-02-12", "1934-02-13", "1934-02-14", "1934-02-15", "1934-02-16", "1934-02-17", "1934-02-18", "1934-02-19", "1935-02-02", "1935-02-03", "1935-02-04", "1935-02-05", "1935-02-06", "1935-02-07", "1935-02-08", "1935-02-09", "1936-01-23", "1936-01-24", "1936-01-25", "1936-01-26", "1936-01-27", "1936-01-28", "1936-01-29", "1937-02-10", "1937-02-11", "1937-02-12", "1937-02-13", "1937-02-14", "1937-02-15", "1937-02-16", "1938-01-30", "1938-01-31", "1938-02-01", "1938-02-02", "1938-02-03", "1938-02-04", "1938-02-05", "1939-02-17", "1939-02-18", "1939-02-19", "1939-02-20", "1939-02-21", "1939-02-22", "1939-02-23", "1939-02-24", "1940-02-06", "1940-02-07", "1940-02-08", "1940-02-09", "1940-02-10", "1940-02-11", "1940-02-12", "1940-02-13", "1941-01-26", "1941-01-27", "1941-01-28", "1941-01-29", "1941-01-30", "1941-01-31", "1941-02-01", "1942-02-14", "1942-02-15", "1942-02-16", "1942-02-17", "1942-02-18", "1942-02-19", "1942-02-20", "1943-02-03", "1943-02-04", "1943-02-05", "1943-02-06", "1943-02-07", "1943-02-08", "1943-02-09", "1943-02-10", "1944-01-24", "1944-01-25", "1944-01-26", "1944-01-27", "1944-01-28", "1944-01-29", "1944-01-30", "1945-02-11", "1945-02-12", "1945-02-13", "1945-02-14", "1945-02-15", "1945-02-16", "1945-02-17", "1945-02-18", "1946-01-31", "1946-02-01", "1946-02-02", "1946-02-03", "1946-02-04", "1946-02-05", "1946-02-06", "1946-02-07", "1947-01-20", "1947-01-21", "1947-01-22", "1947-01-23", "1947-01-24", "1947-01-25", "1947-01-26", "1947-01-27", "1948-02-08", "1948-02-09", "1948-02-10", "1948-02-11", "1948-02-12", "1948-02-13", "1948-02-14", "1948-02-15", "1949-01-27", "1949-01-28", "1949-01-29", "1949-01-30", "1949-01-31", "1949-02-01", "1949-02-02", "1949-02-03", "1950-02-15", "1950-02-16", "1950-02-17", "1950-02-18", "1950-02-19", "1950-02-20", "1950-02-21", "1950-02-22", "1951-02-05", "1951-02-06", "1951-02-07", "1951-02-08", "1951-02-09", "1951-02-10", "1951-02-11", "1952-01-25", "1952-01-26", "1952-01-27", "1952-01-28", "1952-01-29", "1952-01-30", "1952-01-31", "1952-02-01", "1953-02-12", "1953-02-13", "1953-02-14", "1953-02-15", "1953-02-16", "1953-02-17", "1953-02-18", "1953-02-19", "1954-02-02", "1954-02-03", "1954-02-04", "1954-02-05", "1954-02-06", "1954-02-07", "1954-02-08", "1955-01-22", "1955-01-23", "1955-01-24", "1955-01-25", "1955-01-26", "1955-01-27", "1955-01-28", "1955-01-29", "1956-02-10", "1956-02-11", "1956-02-12", "1956-02-13", "1956-02-14", "1956-02-15", "1956-02-16", "1956-02-17", "1957-01-29", "1957-01-30", "1957-01-31", "1957-02-01", "1957-02-02", "1957-02-03", "1957-02-04", "1957-02-05", "1958-02-17", "1958-02-18", "1958-02-19", "1958-02-20", "1958-02-21", "1958-02-22", "1958-02-23", "1959-02-06", "1959-02-07", "1959-02-08", "1959-02-09", "1959-02-10", "1959-02-11", "1959-02-12", "1959-02-13", "1960-01-27", "1960-01-28", "1960-01-29", "1960-01-30", "1960-01-31", "1960-02-01", "1960-02-02", "1961-02-14", "1961-02-15", "1961-02-16", "1961-02-17", "1961-02-18", "1961-02-19", "1961-02-20", "1962-02-03", "1962-02-04", "1962-02-05", "1962-02-06", "1962-02-07", "1962-02-08", "1962-02-09", "1962-02-10", "1963-01-24", "1963-01-25", "1963-01-26", "1963-01-27", "1963-01-28", "1963-01-29", "1963-01-30", "1964-02-12", "1964-02-13", "1964-02-14", "1964-02-15", "1964-02-16", "1964-02-17", "1964-02-18", "1965-01-31", "1965-02-01", "1965-02-02", "1965-02-03", "1965-02-04", "1965-02-05", "1965-02-06", "1965-02-07", "1966-01-20", "1966-01-21", "1966-01-22", "1966-01-23", "1966-01-24", "1966-01-25", "1966-01-26", "1967-02-08", "1967-02-09", "1967-02-10", "1967-02-11", "1967-02-12", "1967-02-13", "1967-02-14", "1968-01-28", "1968-01-29", "1968-01-30", "1968-01-31", "1968-02-01", "1968-02-02", "1968-02-03", "1968-02-04", "1969-02-15", "1969-02-16", "1969-02-17", "1969-02-18", "1969-02-19", "1969-02-20", "1969-02-21", "1969-02-22", "1970-02-05", "1970-02-06", "1970-02-07", "1970-02-08", "1970-02-09", "1970-02-10", "1970-02-11", "1971-01-25", "1971-01-26", "1971-01-27", "1971-01-28", "1971-01-29", "1971-01-30", "1971-01-31", "1971-02-01", "1972-02-13", "1972-02-14", "1972-02-15", "1972-02-16", "1972-02-17", "1972-02-18", "1972-02-19", "1972-02-20", "1973-02-01", "1973-02-02", "1973-02-03", "1973-02-04", "1973-02-05", "1973-02-06", "1973-02-07", "1973-02-08", "1974-01-21", "1974-01-22", "1974-01-23", "1974-01-24", "1974-01-25", "1974-01-26", "1974-01-27", "1974-01-28", "1975-02-09", "1975-02-10", "1975-02-11", "1975-02-12", "1975-02-13", "1975-02-14", "1975-02-15", "1975-02-16", "1976-01-29", "1976-01-30", "1976-01-31", "1976-02-01", "1976-02-02", "1976-02-03", "1976-02-04", "1976-02-05", "1977-02-16", "1977-02-17", "1977-02-18", "1977-02-19", "1977-02-20", "1977-02-21", "1977-02-22", "1977-02-23", "1978-02-06", "1978-02-07", "1978-02-08", "1978-02-09", "1978-02-10", "1978-02-11", "1978-02-12", "1979-01-27", "1979-01-28", "1979-01-29", "1979-01-30", "1979-01-31", "1979-02-01", "1979-02-02", "1980-02-15", "1980-02-16", "1980-02-17", "1980-02-18", "1980-02-19", "1980-02-20", "1980-02-21", "1981-02-03", "1981-02-04", "1981-02-05", "1981-02-06", "1981-02-07", "1981-02-08", "1981-02-09", "1981-02-10", "1982-01-23", "1982-01-24", "1982-01-25", "1982-01-26", "1982-01-27", "1982-01-28", "1982-01-29", "1982-01-30", "1983-02-11", "1983-02-12", "1983-02-13", "1983-02-14", "1983-02-15", "1983-02-16", "1983-02-17", "1983-02-18", "1984-01-31", "1984-02-01", "1984-02-02", "1984-02-03", "1984-02-04", "1984-02-05", "1984-02-06", "1984-02-07", "1985-02-18", "1985-02-19", "1985-02-20", "1985-02-21", "1985-02-22", "1985-02-23", "1985-02-24", "1985-02-25", "1986-02-07", "1986-02-08", "1986-02-09", "1986-02-10", "1986-02-11", "1986-02-12", "1986-02-13", "1986-02-14", "1987-01-28", "1987-01-29", "1987-01-30", "1987-01-31", "1987-02-01", "1987-02-02", "1987-02-03", "1988-02-16", "1988-02-17", "1988-02-18", "1988-02-19", "1988-02-20", "1988-02-21", "1988-02-22", "1989-02-05", "1989-02-06", "1989-02-07", "1989-02-08", "1989-02-09", "1989-02-10", "1989-02-11", "1990-01-25", "1990-01-26", "1990-01-27", "1990-01-28", "1990-01-29", "1990-01-30", "1990-01-31", "1990-02-01", "1991-02-13", "1991-02-14", "1991-02-15", "1991-02-16", "1991-02-17", "1991-02-18", "1991-02-19", "1991-02-20", "1992-02-02", "1992-02-03", "1992-02-04", "1992-02-05", "1992-02-06", "1992-02-07", "1992-02-08", "1992-02-09", "1993-01-21", "1993-01-22", "1993-01-23", "1993-01-24", "1993-01-25", "1993-01-26", "1993-01-27", "1993-01-28", "1994-02-09", "1994-02-10", "1994-02-11", "1994-02-12", "1994-02-13", "1994-02-14", "1994-02-15", "1995-01-29", "1995-01-30", "1995-01-31", "1995-02-01", "1995-02-02", "1995-02-03", "1995-02-04", "1995-02-05", "1996-02-17", "1996-02-18", "1996-02-19", "1996-02-20", "1996-02-21", "1996-02-22", "1996-02-23", "1996-02-24", "1997-02-06", "1997-02-07", "1997-02-08", "1997-02-09", "1997-02-10", "1997-02-11", "1997-02-12", "1998-01-27", "1998-01-28", "1998-01-29", "1998-01-30", "1998-01-31", "1998-02-01", "1998-02-02", "1999-02-14", "1999-02-15", "1999-02-16", "1999-02-17", "1999-02-18", "1999-02-19", "1999-02-20", "1999-02-21", "2000-02-04", "2000-02-05", "2000-02-06", "2000-02-07", "2000-02-08", "2000-02-09", "2000-02-10", "2001-01-23", "2001-01-24", "2001-01-25", "2001-01-26", "2001-01-27", "2001-01-28", "2001-01-29", "2002-02-10", "2002-02-11", "2002-02-12", "2002-02-13", "2002-02-14", "2002-02-15", "2002-02-16", "2002-02-17", "2003-01-31", "2003-02-01", "2003-02-02", "2003-02-03", "2003-02-04", "2003-02-05", "2003-02-06", "2004-01-20", "2004-01-21", "2004-01-22", "2004-01-23", "2004-01-24", "2004-01-25", "2004-01-26", "2004-01-27", "2005-02-07", "2005-02-08", "2005-02-09", "2005-02-10", "2005-02-11", "2005-02-12", "2005-02-13", "2005-02-14", "2006-01-28", "2006-01-29", "2006-01-30", "2006-01-31", "2006-02-01", "2006-02-02", "2006-02-03", "2007-02-16", "2007-02-17", "2007-02-18", "2007-02-19", "2007-02-20", "2007-02-21", "2007-02-22", "2007-02-23", "2008-02-05", "2008-02-06", "2008-02-07", "2008-02-08", "2008-02-09", "2008-02-10", "2008-02-11", "2008-02-12", "2009-01-24", "2009-01-25", "2009-01-26", "2009-01-27", "2009-01-28", "2009-01-29", "2009-01-30", "2009-01-31", "2010-02-12", "2010-02-13", "2010-02-14", "2010-02-15", "2010-02-16", "2010-02-17", "2010-02-18", "2010-02-19", "2011-02-01", "2011-02-02", "2011-02-03", "2011-02-04", "2011-02-05", "2011-02-06", "2011-02-07", "2011-02-08", "2012-01-22", "2012-01-23", "2012-01-24", "2012-01-25", "2012-01-26", "2012-01-27", "2012-01-28", "2013-02-09", "2013-02-10", "2013-02-11", "2013-02-12", "2013-02-13", "2013-02-14", "2013-02-15", "2014-01-29", "2014-01-30", "2014-01-31", "2014-02-01", "2014-02-02", "2014-02-03", "2014-02-04", "2014-02-05", "2015-02-17", "2015-02-18", "2015-02-19", "2015-02-20", "2015-02-21", "2015-02-22", "2015-02-23", "2015-02-24", "2016-02-07", "2016-02-08", "2016-02-09", "2016-02-10", "2016-02-11", "2016-02-12", "2016-02-13", "2017-01-26", "2017-01-27", "2017-01-28", "2017-01-29", "2017-01-30", "2017-01-31", "2017-02-01", "2017-02-02", "2018-02-14", "2018-02-15", "2018-02-16", "2018-02-17", "2018-02-18", "2018-02-19", "2018-02-20", "2018-02-21", "2019-02-03", "2019-02-04", "2019-02-05", "2019-02-06", "2019-02-07", "2019-02-08", "2019-02-09", "2019-02-10", "2020-01-23", "2020-01-24", "2020-01-25", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-29", "2020-01-30", "2021-02-10", "2021-02-11", "2021-02-12", "2021-02-13", "2021-02-14", "2021-02-15", "2021-02-16", "2021-02-17", "2022-01-31", "2022-02-01", "2022-02-02", "2022-02-03", "2022-02-04", "2022-02-05", "2022-02-06", "2023-01-20", "2023-01-21", "2023-01-22", "2023-01-23", "2023-01-24", "2023-01-25", "2023-01-26", "2023-01-27", "2024-02-08", "2024-02-09", "2024-02-10", "2024-02-11", "2024-02-12", "2024-02-13", "2024-02-14", "2024-02-15", "2025-01-28", "2025-01-29", "2025-01-30", "2025-01-31", "2025-02-01", "2025-02-02", "2025-02-03", "2026-02-16", "2026-02-17", "2026-02-18", "2026-02-19", "2026-02-20", "2026-02-21", "2026-02-22", "2027-02-05", "2027-02-06", "2027-02-07", "2027-02-08", "2027-02-09", "2027-02-10", "2027-02-11", "2028-01-25", "2028-01-26", "2028-01-27", "2028-01-28", "2028-01-29", "2028-01-30", "2028-01-31", "2029-02-12", "2029-02-13", "2029-02-14", "2029-02-15", "2029-02-16", "2029-02-17", "2029-02-18", "2030-02-01", "2030-02-02", "2030-02-03", "2030-02-04", "2030-02-05", "2030-02-06", "2030-02-07", "2030-02-08", "2031-01-22", "2031-01-23", "2031-01-24", "2031-01-25", "2031-01-26", "2031-01-27", "2031-01-28", "2032-02-10", "2032-02-11", "2032-02-12", "2032-02-13", "2032-02-14", "2032-02-15", "2032-02-16", "2033-01-29", "2033-01-30", "2033-01-31", "2033-02-01", "2033-02-02", "2033-02-03", "2033-02-04", "2033-02-05", "2034-02-17", "2034-02-18", "2034-02-19", "2034-02-20", "2034-02-21", "2034-02-22", "2034-02-23", "2034-02-24", "2035-02-06", "2035-02-07", "2035-02-08", "2035-02-09", "2035-02-10", "2035-02-11", "2035-02-12", "2035-02-13", "2036-01-26", "2036-01-27", "2036-01-28", "2036-01-29", "2036-01-30", "2036-01-31", "2036-02-01", "2036-02-02", "2037-02-13", "2037-02-14", "2037-02-15", "2037-02-16", "2037-02-17", "2037-02-18", "2037-02-19", "2037-02-20", "2038-02-02", "2038-02-03", "2038-02-04", "2038-02-05", "2038-02-06", "2038-02-07", "2038-02-08", "2038-02-09", "2039-01-23", "2039-01-24", "2039-01-25", "2039-01-26", "2039-01-27", "2039-01-28", "2039-01-29", "2040-02-11", "2040-02-12", "2040-02-13", "2040-02-14", "2040-02-15", "2040-02-16", "2040-02-17", "2041-01-31", "2041-02-01", "2041-02-02", "2041-02-03", "2041-02-04", "2041-02-05", "2041-02-06", "2042-01-20", "2042-01-21", "2042-01-22", "2042-01-23", "2042-01-24", "2042-01-25", "2042-01-26", "2042-01-27", "2043-02-08", "2043-02-09", "2043-02-10", "2043-02-11", "2043-02-12", "2043-02-13", "2043-02-14", "2043-02-15", "2044-01-28", "2044-01-29", "2044-01-30", "2044-01-31", "2044-02-01", "2044-02-02", "2044-02-03", "2044-02-04", "2045-02-15", "2045-02-16", "2045-02-17", "2045-02-18", "2045-02-19", "2045-02-20", "2045-02-21", "2045-02-22", "2046-02-04", "2046-02-05", "2046-02-06", "2046-02-07", "2046-02-08", "2046-02-09", "2046-02-10", "2046-02-11", "2047-01-24", "2047-01-25", "2047-01-26", "2047-01-27", "2047-01-28", "2047-01-29", "2047-01-30", "2047-01-31", "2048-02-12", "2048-02-13", "2048-02-14", "2048-02-15", "2048-02-16", "2048-02-17", "2048-02-18", "2048-02-19", "2049-02-01", "2049-02-02", "2049-02-03", "2049-02-04", "2049-02-05", "2049-02-06", "2049-02-07", "2050-01-22", "2050-01-23", "2050-01-24", "2050-01-25", "2050-01-26", "2050-01-27", "2050-01-28", "2051-02-10", "2051-02-11", "2051-02-12", "2051-02-13", "2051-02-14", "2051-02-15", "2051-02-16", "2052-01-30", "2052-01-31", "2052-02-01", "2052-02-02", "2052-02-03", "2052-02-04", "2052-02-05", "2052-02-06", "2053-02-17", "2053-02-18", "2053-02-19", "2053-02-20", "2053-02-21", "2053-02-22", "2053-02-23", "2053-02-24", "2054-02-06", "2054-02-07", "2054-02-08", "2054-02-09", "2054-02-10", "2054-02-11", "2054-02-12", "2054-02-13", "2055-01-26", "2055-01-27", "2055-01-28", "2055-01-29", "2055-01-30", "2055-01-31", "2055-02-01", "2055-02-02", "2056-02-14", "2056-02-15", "2056-02-16", "2056-02-17", "2056-02-18", "2056-02-19", "2056-02-20", "2057-02-02", "2057-02-03", "2057-02-04", "2057-02-05", "2057-02-06", "2057-02-07", "2057-02-08", "2057-02-09", "2058-01-23", "2058-01-24", "2058-01-25", "2058-01-26", "2058-01-27", "2058-01-28", "2058-01-29", "2059-02-11", "2059-02-12", "2059-02-13", "2059-02-14", "2059-02-15", "2059-02-16", "2059-02-17", "2060-02-01", "2060-02-02", "2060-02-03", "2060-02-04", "2060-02-05", "2060-02-06", "2060-02-07", "2061-01-20", "2061-01-21", "2061-01-22", "2061-01-23", "2061-01-24", "2061-01-25", "2061-01-26", "2062-02-08", "2062-02-09", "2062-02-10", "2062-02-11", "2062-02-12", "2062-02-13", "2062-02-14", "2063-01-28", "2063-01-29", "2063-01-30", "2063-01-31", "2063-02-01", "2063-02-02", "2063-02-03", "2064-02-15", "2064-02-16", "2064-02-17", "2064-02-18", "2064-02-19", "2064-02-20", "2064-02-21", "2064-02-22", "2065-02-04", "2065-02-05", "2065-02-06", "2065-02-07", "2065-02-08", "2065-02-09", "2065-02-10", "2066-01-24", "2066-01-25", "2066-01-26", "2066-01-27", "2066-01-28", "2066-01-29", "2066-01-30", "2066-01-31", "2067-02-12", "2067-02-13", "2067-02-14", "2067-02-15", "2067-02-16", "2067-02-17", "2067-02-18", "2067-02-19", "2068-02-02", "2068-02-03", "2068-02-04", "2068-02-05", "2068-02-06", "2068-02-07", "2068-02-08", "2069-01-21", "2069-01-22", "2069-01-23", "2069-01-24", "2069-01-25", "2069-01-26", "2069-01-27", "2069-01-28", "2070-02-09", "2070-02-10", "2070-02-11", "2070-02-12", "2070-02-13", "2070-02-14", "2070-02-15", "2070-02-16", "2071-01-29", "2071-01-30", "2071-01-31", "2071-02-01", "2071-02-02", "2071-02-03", "2071-02-04", "2071-02-05", "2072-02-17", "2072-02-18", "2072-02-19", "2072-02-20", "2072-02-21", "2072-02-22", "2072-02-23", "2072-02-24", "2073-02-05", "2073-02-06", "2073-02-07", "2073-02-08", "2073-02-09", "2073-02-10", "2073-02-11", "2073-02-12", "2074-01-26", "2074-01-27", "2074-01-28", "2074-01-29", "2074-01-30", "2074-01-31", "2074-02-01", "2075-02-14", "2075-02-15", "2075-02-16", "2075-02-17", "2075-02-18", "2075-02-19", "2075-02-20", "2076-02-03", "2076-02-04", "2076-02-05", "2076-02-06", "2076-02-07", "2076-02-08", "2076-02-09", "2076-02-10", "2077-01-23", "2077-01-24", "2077-01-25", "2077-01-26", "2077-01-27", "2077-01-28", "2077-01-29", "2078-02-11", "2078-02-12", "2078-02-13", "2078-02-14", "2078-02-15", "2078-02-16", "2078-02-17", "2079-01-31", "2079-02-01", "2079-02-02", "2079-02-03", "2079-02-04", "2079-02-05", "2079-02-06", "2079-02-07", "2080-01-20", "2080-01-21", "2080-01-22", "2080-01-23", "2080-01-24", "2080-01-25", "2080-01-26", "2080-01-27", "2081-02-07", "2081-02-08", "2081-02-09", "2081-02-10", "2081-02-11", "2081-02-12", "2081-02-13", "2081-02-14", "2082-01-27", "2082-01-28", "2082-01-29", "2082-01-30", "2082-01-31", "2082-02-01", "2082-02-02", "2082-02-03", "2083-02-15", "2083-02-16", "2083-02-17", "2083-02-18", "2083-02-19", "2083-02-20", "2083-02-21", "2083-02-22", "2084-02-05", "2084-02-06", "2084-02-07", "2084-02-08", "2084-02-09", "2084-02-10", "2084-02-11", "2085-01-24", "2085-01-25", "2085-01-26", "2085-01-27", "2085-01-28", "2085-01-29", "2085-01-30", "2085-01-31", "2086-02-12", "2086-02-13", "2086-02-14", "2086-02-15", "2086-02-16", "2086-02-17", "2086-02-18", "2086-02-19", "2087-02-02", "2087-02-03", "2087-02-04", "2087-02-05", "2087-02-06", "2087-02-07", "2087-02-08", "2088-01-22", "2088-01-23", "2088-01-24", "2088-01-25", "2088-01-26", "2088-01-27", "2088-01-28", "2088-01-29", "2089-02-09", "2089-02-10", "2089-02-11", "2089-02-12", "2089-02-13", "2089-02-14", "2089-02-15", "2090-01-29", "2090-01-30", "2090-01-31", "2090-02-01", "2090-02-02", "2090-02-03", "2090-02-04", "2091-02-17", "2091-02-18", "2091-02-19", "2091-02-20", "2091-02-21", "2091-02-22", "2091-02-23", "2092-02-06", "2092-02-07", "2092-02-08", "2092-02-09", "2092-02-10", "2092-02-11", "2092-02-12", "2093-01-26", "2093-01-27", "2093-01-28", "2093-01-29", "2093-01-30", "2093-01-31", "2093-02-01", "2094-02-14", "2094-02-15", "2094-02-16", "2094-02-17", "2094-02-18", "2094-02-19", "2094-02-20", "2095-02-03", "2095-02-04", "2095-02-05", "2095-02-06", "2095-02-07", "2095-02-08", "2095-02-09", "2095-02-10", "2096-01-24", "2096-01-25", "2096-01-26", "2096-01-27", "2096-01-28", "2096-01-29", "2096-01-30", "2097-02-10", "2097-02-11", "2097-02-12", "2097-02-13", "2097-02-14", "2097-02-15", "2097-02-16", "2097-02-17", "2098-01-30", "2098-01-31", "2098-02-01", "2098-02-02", "2098-02-03", "2098-02-04", "2098-02-05", "2098-02-06", "2099-01-19", "2099-01-20", "2099-01-21", "2099-01-22", "2099-01-23", "2099-01-24", "2099-01-25", "2099-01-26");
    private static final Set<String> DUANWU = Sets.newHashSet("1900-06-01", "1901-06-20", "1902-06-10", "1903-05-31", "1904-06-18", "1905-06-07", "1906-06-26", "1907-06-15", "1908-06-03", "1909-06-22", "1910-06-11", "1911-06-01", "1912-06-19", "1913-06-09", "1914-05-29", "1915-06-17", "1916-06-05", "1917-06-23", "1918-06-13", "1919-06-02", "1920-06-20", "1921-06-10", "1922-05-31", "1923-06-18", "1924-06-06", "1925-06-25", "1926-06-14", "1927-06-04", "1928-06-22", "1929-06-11", "1930-06-01", "1931-06-20", "1932-06-08", "1933-05-28", "1934-06-16", "1935-06-05", "1936-06-23", "1937-06-13", "1938-06-02", "1939-06-21", "1940-06-10", "1941-05-30", "1942-06-18", "1943-06-07", "1944-06-25", "1945-06-14", "1946-06-04", "1947-06-23", "1948-06-11", "1949-06-01", "1950-06-19", "1951-06-09", "1952-05-28", "1953-06-15", "1954-06-05", "1955-06-24", "1956-06-13", "1957-06-02", "1958-06-21", "1959-06-10", "1960-05-29", "1961-06-17", "1962-06-06", "1963-06-25", "1964-06-14", "1965-06-04", "1966-06-23", "1967-06-12", "1968-05-31", "1969-06-19", "1970-06-08", "1971-05-28", "1972-06-15", "1973-06-05", "1974-06-24", "1975-06-14", "1976-06-02", "1977-06-21", "1978-06-10", "1979-05-30", "1980-06-17", "1981-06-06", "1982-06-25", "1983-06-15", "1984-06-04", "1985-06-22", "1986-06-11", "1987-05-31", "1988-06-18", "1989-06-08", "1990-05-28", "1991-06-16", "1992-06-05", "1993-06-24", "1994-06-13", "1995-06-02", "1996-06-20", "1997-06-09", "1998-05-30", "1999-06-18", "2000-06-06", "2001-06-25", "2002-06-15", "2003-06-04", "2004-06-22", "2005-06-11", "2006-05-31", "2007-06-19", "2008-06-08", "2009-05-28", "2010-06-16", "2011-06-06", "2012-06-23", "2013-06-12", "2014-06-02", "2015-06-20", "2016-06-09", "2017-05-30", "2018-06-18", "2019-06-07", "2020-06-25", "2021-06-14", "2022-06-03", "2023-06-22", "2024-06-10", "2025-05-31", "2026-06-19", "2027-06-09", "2028-05-28", "2029-06-16", "2030-06-05", "2031-06-24", "2032-06-12", "2033-06-01", "2034-06-20", "2035-06-10", "2036-05-30", "2037-06-18", "2038-06-07", "2039-05-27", "2040-06-14", "2041-06-03", "2042-06-22", "2043-06-11", "2044-05-31", "2045-06-19", "2046-06-08", "2047-05-29", "2048-06-15", "2049-06-04", "2050-06-23", "2051-06-13", "2052-06-01", "2053-06-20", "2054-06-10", "2055-05-30", "2056-06-17", "2057-06-06", "2058-06-25", "2059-06-14", "2060-06-03", "2061-06-22", "2062-06-11", "2063-06-01", "2064-06-19", "2065-06-08", "2066-05-28", "2067-06-16", "2068-06-04", "2069-06-23", "2070-06-13", "2071-06-02", "2072-06-20", "2073-06-10", "2074-05-30", "2075-06-17", "2076-06-06", "2077-06-24", "2078-06-14", "2079-06-04", "2080-06-22", "2081-06-11", "2082-06-01", "2083-06-19", "2084-06-07", "2085-05-27", "2086-06-15", "2087-06-05", "2088-06-23", "2089-06-13", "2090-06-02", "2091-06-21", "2092-06-09", "2093-05-29", "2094-06-17", "2095-06-06", "2096-06-24", "2097-06-14", "2098-06-04", "2099-06-23");
    private static final Set<String> MID_AUTUMN = Sets.newHashSet("1900-09-08", "1901-09-27", "1902-09-16", "1903-10-05", "1904-09-24", "1905-09-13", "1906-10-02", "1907-09-22", "1908-09-10", "1909-09-28", "1910-09-18", "1911-10-06", "1912-09-25", "1913-09-15", "1914-10-04", "1915-09-23", "1916-09-12", "1917-09-30", "1918-09-19", "1919-10-08", "1920-09-26", "1921-09-16", "1922-10-05", "1923-09-25", "1924-09-13", "1925-10-02", "1926-09-21", "1927-09-10", "1928-09-28", "1929-09-17", "1930-10-06", "1931-09-26", "1932-09-15", "1933-10-04", "1934-09-23", "1935-09-12", "1936-09-30", "1937-09-19", "1938-10-08", "1939-09-27", "1940-09-16", "1941-10-05", "1942-09-24", "1943-09-14", "1944-10-01", "1945-09-20", "1946-09-10", "1947-09-29", "1948-09-17", "1949-10-06", "1950-09-26", "1951-09-15", "1952-10-03", "1953-09-22", "1954-09-11", "1955-09-30", "1956-09-19", "1957-09-08", "1958-09-27", "1959-09-17", "1960-10-05", "1961-09-24", "1962-09-13", "1963-10-02", "1964-09-20", "1965-09-10", "1966-09-29", "1967-09-18", "1968-10-06", "1969-09-26", "1970-09-15", "1971-10-03", "1972-09-22", "1973-09-11", "1974-09-30", "1975-09-20", "1976-09-08", "1977-09-27", "1978-09-17", "1979-10-05", "1980-09-23", "1981-09-12", "1982-10-01", "1983-09-21", "1984-09-10", "1985-09-29", "1986-09-18", "1987-10-07", "1988-09-25", "1989-09-14", "1990-10-03", "1991-09-22", "1992-09-11", "1993-09-30", "1994-09-20", "1995-09-09", "1996-09-27", "1997-09-16", "1998-10-05", "1999-09-24", "2000-09-12", "2001-10-01", "2002-09-21", "2003-09-11", "2004-09-28", "2005-09-18", "2006-10-06", "2007-09-25", "2008-09-14", "2009-10-03", "2010-09-22", "2011-09-12", "2012-09-30", "2013-09-19", "2014-09-08", "2015-09-27", "2016-09-15", "2017-10-04", "2018-09-24", "2019-09-13", "2020-10-01", "2021-09-21", "2022-09-10", "2023-09-29", "2024-09-17", "2025-10-06", "2026-09-25", "2027-09-15", "2028-10-03", "2029-09-22", "2030-09-12", "2031-10-01", "2032-09-19", "2033-09-08", "2034-09-27", "2035-09-16", "2036-10-04", "2037-09-24", "2038-09-13", "2039-10-02", "2040-09-20", "2041-09-10", "2042-09-28", "2043-09-17", "2044-10-05", "2045-09-25", "2046-09-15", "2047-10-04", "2048-09-22", "2049-09-11", "2050-09-30", "2051-09-19", "2052-09-07", "2053-09-26", "2054-09-16", "2055-10-05", "2056-09-24", "2057-09-13", "2058-10-02", "2059-09-21", "2060-09-09", "2061-09-28", "2062-09-17", "2063-10-06", "2064-09-25", "2065-09-15", "2066-10-03", "2067-09-23", "2068-09-11", "2069-09-29", "2070-09-19", "2071-09-08", "2072-09-26", "2073-09-16", "2074-10-05", "2075-09-24", "2076-09-12", "2077-10-01", "2078-09-20", "2079-09-10", "2080-09-28", "2081-09-17", "2082-10-06", "2083-09-26", "2084-09-14", "2085-10-03", "2086-09-22", "2087-09-11", "2088-09-29", "2089-09-18", "2090-09-08", "2091-09-27", "2092-09-16", "2093-10-05", "2094-09-24", "2095-09-13", "2096-09-30", "2097-09-20", "2098-09-09", "2099-09-29");

    public static IAnimation<EntityMaid> getHeadDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");
                if (head != null) {
                    head.setRotateAngleX(headPitch * 0.017453292f);
                    head.setRotateAngleY(netHeadYaw * 0.017453292f);
                    if (maid.isSleep()) {
                        head.setRotateAngleX(15 * 0.017453292f);
                    }
                }

                ModelRendererWrapper hat = modelMap.get("hat");
                if (hat != null) {
                    hat.setHidden(maid.isSleep());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHeadBlink() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper blink = modelMap.get("blink");

                if (blink != null) {
                    if (maid.isSleep()) {
                        blink.setHidden(false);
                        return;
                    }
                    float remainder = (ageInTicks + Math.abs(maid.getUniqueID().getLeastSignificantBits()) % 10) % 60;
                    blink.setHidden(!(55 < remainder && remainder < 60));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHeadBeg() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");
                ModelRendererWrapper ahoge = modelMap.get("ahoge");
                ModelRendererWrapper begShow = modelMap.get("begShow");

                if (maid.isBegging()) {
                    if (head != null) {
                        head.setRotateAngleZ(0.139f);
                    }
                    if (ahoge != null) {
                        ahoge.setRotateAngleX((float) (Math.cos(ageInTicks * 1.0) * 0.05) + ahoge.getInitRotateAngleX());
                        ahoge.setRotateAngleZ((float) (Math.sin(ageInTicks * 1.0) * 0.05) + ahoge.getInitRotateAngleZ());
                    }
                    if (begShow != null) {
                        begShow.setHidden(false);
                    }
                } else {
                    if (head != null) {
                        head.setRotateAngleZ(head.getInitRotateAngleZ());
                    }
                    if (ahoge != null) {
                        ahoge.setRotateAngleZ(ahoge.getInitRotateAngleZ());
                    }
                    if (begShow != null) {
                        begShow.setHidden(true);
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHeadExtra() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper headExtraA = modelMap.get("headExtraA");
                if (headExtraA != null) {
                    headExtraA.setRotateAngleX(headPitch * 0.017453292f);
                    headExtraA.setRotateAngleY(netHeadYaw * 0.017453292f);
                }

                ModelRendererWrapper headExtraB = modelMap.get("headExtraB");
                if (headExtraB != null) {
                    headExtraB.setRotateAngleX(headPitch * 0.017453292f);
                    headExtraB.setRotateAngleY(netHeadYaw * 0.017453292f);
                }

                ModelRendererWrapper headExtraC = modelMap.get("headExtraC");
                if (headExtraC != null) {
                    headExtraC.setRotateAngleX(headPitch * 0.017453292f);
                    headExtraC.setRotateAngleY(netHeadYaw * 0.017453292f);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHeadHurt() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper hurtBlink = modelMap.get("hurtBlink");

                if (hurtBlink != null) {
                    hurtBlink.setHidden(!maid.onHurt());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHeadReverseBlink() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper reverseBlink = modelMap.get("_bink");
                ModelRendererWrapper reverseBlinkCorrect = modelMap.get("_blink");
                float remainder = (ageInTicks + Math.abs(maid.getUniqueID().getLeastSignificantBits()) % 10) % 60;
                if (reverseBlink != null) {
                    reverseBlink.setHidden(55 < remainder && remainder < 60);
                }
                if (reverseBlinkCorrect != null) {
                    reverseBlinkCorrect.setHidden(55 < remainder && remainder < 60);
                }
            }
        };
    }


    public static IAnimation<EntityMaid> getHeadMusicShake() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");

                if (head != null) {
                    if (isPortableAudioPlay(maid)) {
                        head.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.4) * 0.06) + head.getInitRotateAngleZ());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getLegDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper legLeft = modelMap.get("legLeft");
                ModelRendererWrapper legRight = modelMap.get("legRight");

                boolean isFarm = "farm".equals(maid.getTask().getUid().getPath()) && maid.swingProgress > 0.0;

                if (isFarm) {
                    GlStateManager.translate(0, 0.0713625, -0.35876875);
                    GlStateManager.rotate(22.5f, 1, 0, 0);
                }

                if (legLeft != null) {
                    double leftRad = Math.cos(limbSwing * 0.67) * 0.3 * limbSwingAmount;
                    if (isFarm) {
                        leftRad -= 0.3927;
                    }
                    legLeft.setRotateAngleX((float) leftRad);
                    legLeft.setRotateAngleY(legLeft.getInitRotateAngleY());
                    legLeft.setRotateAngleZ(legLeft.getInitRotateAngleZ());
                }
                if (legRight != null) {
                    double rightRad = -Math.cos(limbSwing * 0.67) * 0.3 * limbSwingAmount;
                    if (isFarm) {
                        rightRad -= 0.3927;
                    }
                    legRight.setRotateAngleX((float) rightRad);
                    legRight.setRotateAngleY(legRight.getInitRotateAngleY());
                    legRight.setRotateAngleZ(legRight.getInitRotateAngleZ());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getLegExtra() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper legLeftExtraA = modelMap.get("legLeftExtraA");
                ModelRendererWrapper legRightExtraA = modelMap.get("legRightExtraA");

                if (legLeftExtraA != null) {
                    legLeftExtraA.setRotateAngleX((float) (Math.cos(limbSwing * 0.67) * 0.3 * limbSwingAmount));
                    legLeftExtraA.setRotateAngleY(legLeftExtraA.getInitRotateAngleY());
                    legLeftExtraA.setRotateAngleZ(legLeftExtraA.getInitRotateAngleZ());
                }
                if (legRightExtraA != null) {
                    legRightExtraA.setRotateAngleX((float) (-Math.cos(limbSwing * 0.67) * 0.3 * limbSwingAmount));
                    legRightExtraA.setRotateAngleY(legRightExtraA.getInitRotateAngleY());
                    legRightExtraA.setRotateAngleZ(legRightExtraA.getInitRotateAngleZ());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getLegVertical() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper legLeftVertical = modelMap.get("legLeftVertical");
                ModelRendererWrapper legLeft = modelMap.get("legLeft");
                if (legLeftVertical != null) {
                    if (legLeft != null) {
                        legLeftVertical.setRotateAngleX(-legLeft.getRotateAngleX());
                        legLeftVertical.setRotateAngleZ(-legLeft.getRotateAngleZ());
                    }
                }

                ModelRendererWrapper legRightVertical = modelMap.get("legRightVertical");
                ModelRendererWrapper legRight = modelMap.get("legRight");
                if (legRightVertical != null) {
                    if (legRight != null) {
                        legRightVertical.setRotateAngleX(-legRight.getRotateAngleX());
                        legRightVertical.setRotateAngleZ(-legRight.getRotateAngleZ());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                double f1 = 1.0 - Math.pow(1.0 - maid.swingProgress, 4);
                double f2 = Math.sin(f1 * Math.PI);
                double f3 = Math.sin(maid.swingProgress * Math.PI) * -0.7 * 0.75;

                float[] rotation;
                if (armLeft != null) {
                    if (maid.isSitInJoyBlock()) {
                        armLeft.setRotateAngleX(-1.3f);
                    } else if (isHoldTrolley(maid)) {
                        armLeft.setRotateAngleX(0.5f);
                        armLeft.setRotateAngleY(armLeft.getInitRotateAngleY());
                        armLeft.setRotateAngleZ(-0.395f);
                    } else if (isHoldVehicle(maid)) {
                        rotation = getLeftHandRotation(maid);
                        armLeft.setRotateAngleX(rotation[0]);
                        armLeft.setRotateAngleY(rotation[1]);
                        armLeft.setRotateAngleZ(rotation[2]);
                    } else {
                        armLeft.setRotateAngleX((float) (-Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armLeft.setRotateAngleY(armLeft.getInitRotateAngleY());
                        armLeft.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.05) * 0.05 + armLeft.getInitRotateAngleZ()));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && isSwingLeftHand(maid)) {
                            armLeft.setRotateAngleX((float) (armLeft.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armLeft.setRotateAngleZ((float) (armLeft.getRotateAngleZ() + Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }

                if (armRight != null) {
                    if (maid.isSitInJoyBlock()) {
                        armRight.setRotateAngleX(-1.3f);
                    } else if (isHoldVehicle(maid)) {
                        rotation = getRightHandRotation(maid);
                        armRight.setRotateAngleX(rotation[0]);
                        armRight.setRotateAngleY(rotation[1]);
                        armRight.setRotateAngleZ(rotation[2]);
                    } else {
                        armRight.setRotateAngleX((float) (Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armRight.setRotateAngleY(armRight.getInitRotateAngleY());
                        armRight.setRotateAngleZ((float) (-Math.cos(ageInTicks * 0.05) * 0.05 + armRight.getInitRotateAngleZ()));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && !isSwingLeftHand(maid)) {
                            armRight.setRotateAngleX((float) (armRight.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armRight.setRotateAngleZ((float) (armRight.getRotateAngleZ() + Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmExtra() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeft = modelMap.get("armLeftExtraA");
                ModelRendererWrapper armRight = modelMap.get("armRightExtraA");

                double f1 = 1.0 - Math.pow(1.0 - maid.swingProgress, 4);
                double f2 = Math.sin(f1 * Math.PI);
                double f3 = Math.sin(maid.swingProgress * Math.PI) * -0.7 * 0.75;

                float[] rotation;
                if (armLeft != null) {
                    if (isHoldTrolley(maid)) {
                        armLeft.setRotateAngleX(0.5f);
                        armLeft.setRotateAngleY(armLeft.getInitRotateAngleY());
                        armLeft.setRotateAngleZ(-0.395f);
                    } else if (isHoldVehicle(maid)) {
                        rotation = getLeftHandRotation(maid);
                        armLeft.setRotateAngleX(rotation[0]);
                        armLeft.setRotateAngleY(rotation[1]);
                        armLeft.setRotateAngleZ(rotation[2]);
                    } else {
                        armLeft.setRotateAngleX((float) (-Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armLeft.setRotateAngleY(armLeft.getInitRotateAngleY());
                        armLeft.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.05) * 0.05 + armLeft.getInitRotateAngleZ()));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && isSwingLeftHand(maid)) {
                            armLeft.setRotateAngleX((float) (armLeft.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armLeft.setRotateAngleZ((float) (armLeft.getRotateAngleZ() + Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }

                if (armRight != null) {
                    if (isHoldVehicle(maid)) {
                        rotation = getRightHandRotation(maid);
                        armRight.setRotateAngleX(rotation[0]);
                        armRight.setRotateAngleY(rotation[1]);
                        armRight.setRotateAngleZ(rotation[2]);
                    } else {
                        armRight.setRotateAngleX((float) (Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armRight.setRotateAngleY(armRight.getInitRotateAngleY());
                        armRight.setRotateAngleZ((float) (-Math.cos(ageInTicks * 0.05) * 0.05 + armRight.getInitRotateAngleZ()));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && !isSwingLeftHand(maid)) {
                            armRight.setRotateAngleX((float) (armRight.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armRight.setRotateAngleZ((float) (armRight.getRotateAngleZ() + Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmSwing() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                if (maid.isSwingingArms()) {
                    if (armLeft != null) {
                        armLeft.setRotateAngleX(-1.396f);
                        armLeft.setRotateAngleY(0.785f);
                    }
                    if (armRight != null) {
                        armRight.setRotateAngleX(-1.396f);
                        armRight.setRotateAngleY(-0.174f);
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmVertical() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeftVertical = modelMap.get("armLeftVertical");
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                if (armLeftVertical != null) {
                    if (armLeft != null) {
                        armLeftVertical.setRotateAngleX(-armLeft.getRotateAngleX());
                        armLeftVertical.setRotateAngleZ(-armLeft.getRotateAngleZ());
                    }
                }

                ModelRendererWrapper armRightVertical = modelMap.get("armRightVertical");
                ModelRendererWrapper armRight = modelMap.get("armRight");
                if (armRightVertical != null) {
                    if (armRight != null) {
                        armRightVertical.setRotateAngleX(-armRight.getRotateAngleX());
                        armRightVertical.setRotateAngleZ(-armRight.getRotateAngleZ());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSitDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");
                ModelRendererWrapper legLeft = modelMap.get("legLeft");
                ModelRendererWrapper legRight = modelMap.get("legRight");
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                // 头部复位
                if (head != null) {
                    head.setOffsetY(0);
                }

                if (isRidingMarisaBroom(maid)) {
                    // 坐在扫帚上时，应用待命的动作
                    ridingBroomPosture(head, armLeft, armRight, legLeft, legRight);
                } else if (maid.isRiding()) {
                    ridingPosture(legLeft, legRight);
                } else if (maid.isSitting()) {
                    sittingPosture(armLeft, armRight, legLeft, legRight);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSitNoLeg() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");
                ModelRendererWrapper legLeft = modelMap.get("legLeft");
                ModelRendererWrapper legRight = modelMap.get("legRight");
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                // 头部复位
                if (head != null) {
                    head.setOffsetY(0);
                }

                if (isRidingMarisaBroom(maid)) {
                    // 坐在扫帚上时，应用待命的动作
                    ridingBroomPosture(head, armLeft, armRight, legLeft, legRight);
                } else if (maid.isRiding()) {
                    ridingPosture(legLeft, legRight);
                } else if (maid.isSitting()) {
                    sittingNoLegPosture(armLeft, armRight);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSitSkirtHidden() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sittingHiddenSkirt = modelMap.get("sittingHiddenSkirt");
                if (sittingHiddenSkirt != null) {
                    sittingHiddenSkirt.setHidden(isRidingMarisaBroom(maid) || maid.isRiding() || maid.isSitting());
                }

                ModelRendererWrapper reverseSittingHiddenSkirt = modelMap.get("_sittingHiddenSkirt");
                if (reverseSittingHiddenSkirt != null) {
                    reverseSittingHiddenSkirt.setHidden(!isRidingMarisaBroom(maid) && !maid.isRiding() && !maid.isSitting());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSitSkirtRotation() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sittingRotationSkirt = modelMap.get("sittingRotationSkirt");
                if (sittingRotationSkirt != null) {
                    if (isRidingMarisaBroom(maid) || maid.isRiding() || maid.isSitting()) {
                        sittingRotationSkirt.setRotateAngleX(-0.567f);
                    } else {
                        sittingRotationSkirt.setRotateAngleX(sittingRotationSkirt.getInitRotateAngleX());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSitSkirtRotationSwing() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sittingRotationSwingSkirt = modelMap.get("sittingRotationSwingSkirt");
                if (sittingRotationSwingSkirt != null) {
                    if (isRidingMarisaBroom(maid) || maid.isRiding() || maid.isSitting()) {
                        sittingRotationSwingSkirt.setRotateAngleX(-0.567f);
                        sittingRotationSwingSkirt.setRotateAngleZ(sittingRotationSwingSkirt.getInitRotateAngleZ());
                    } else {
                        sittingRotationSwingSkirt.setRotateAngleX(sittingRotationSwingSkirt.getInitRotateAngleX());
                        float rotationZ = (float) Math.sin(ageInTicks * 0.05) * 0.03f;
                        sittingRotationSwingSkirt.setRotateAngleZ(sittingRotationSwingSkirt.getInitRotateAngleZ() + rotationZ);
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmet = modelMap.get("helmet");
                ModelRendererWrapper chestPlate = modelMap.get("chestPlate");
                ModelRendererWrapper chestPlateLeft = modelMap.get("chestPlateLeft");
                ModelRendererWrapper chestPlateMiddle = modelMap.get("chestPlateMiddle");
                ModelRendererWrapper chestPlateRight = modelMap.get("chestPlateRight");
                ModelRendererWrapper leggings = modelMap.get("leggings");
                ModelRendererWrapper leggingsLeft = modelMap.get("leggingsLeft");
                ModelRendererWrapper leggingsMiddle = modelMap.get("leggingsMiddle");
                ModelRendererWrapper leggingsRight = modelMap.get("leggingsRight");
                ModelRendererWrapper bootsLeft = modelMap.get("bootsLeft");
                ModelRendererWrapper bootsRight = modelMap.get("bootsRight");

                if (helmet != null) {
                    helmet.setHidden(!maid.hasHelmet());
                }
                if (chestPlate != null) {
                    chestPlate.setHidden(!maid.hasChestPlate());
                }
                if (chestPlateLeft != null) {
                    chestPlateLeft.setHidden(!maid.hasChestPlate());
                }
                if (chestPlateMiddle != null) {
                    chestPlateMiddle.setHidden(!maid.hasChestPlate());
                }
                if (chestPlateRight != null) {
                    chestPlateRight.setHidden(!maid.hasChestPlate());
                }
                if (leggings != null) {
                    leggings.setHidden(!maid.hasLeggings());
                }
                if (leggingsLeft != null) {
                    leggingsLeft.setHidden(!maid.hasLeggings());
                }
                if (leggingsMiddle != null) {
                    leggingsMiddle.setHidden(!maid.hasLeggings());
                }
                if (leggingsRight != null) {
                    leggingsRight.setHidden(!maid.hasLeggings());
                }
                if (bootsLeft != null) {
                    bootsLeft.setHidden(!maid.hasBoots());
                }
                if (bootsRight != null) {
                    bootsRight.setHidden(!maid.hasBoots());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorReverse() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper reverseHelmet = modelMap.get("_helmet");
                ModelRendererWrapper reverseChestPlate = modelMap.get("_chestPlate");
                ModelRendererWrapper reverseChestPlateLeft = modelMap.get("_chestPlateLeft");
                ModelRendererWrapper reverseChestPlateMiddle = modelMap.get("_chestPlateMiddle");
                ModelRendererWrapper reverseChestPlateRight = modelMap.get("_chestPlateRight");
                ModelRendererWrapper reverseLeggings = modelMap.get("_leggings");
                ModelRendererWrapper reverseLeggingsLeft = modelMap.get("_leggingsLeft");
                ModelRendererWrapper reverseLeggingsMiddle = modelMap.get("_leggingsMiddle");
                ModelRendererWrapper reverseLeggingsRight = modelMap.get("_leggingsRight");
                ModelRendererWrapper reverseBootsLeft = modelMap.get("_bootsLeft");
                ModelRendererWrapper reverseBootsRight = modelMap.get("_bootsRight");

                if (reverseHelmet != null) {
                    reverseHelmet.setHidden(maid.hasHelmet());
                }
                if (reverseChestPlate != null) {
                    reverseChestPlate.setHidden(maid.hasChestPlate());
                }
                if (reverseChestPlateLeft != null) {
                    reverseChestPlateLeft.setHidden(maid.hasChestPlate());
                }
                if (reverseChestPlateMiddle != null) {
                    reverseChestPlateMiddle.setHidden(maid.hasChestPlate());
                }
                if (reverseChestPlateRight != null) {
                    reverseChestPlateRight.setHidden(maid.hasChestPlate());
                }
                if (reverseLeggings != null) {
                    reverseLeggings.setHidden(maid.hasLeggings());
                }
                if (reverseLeggingsLeft != null) {
                    reverseLeggingsLeft.setHidden(maid.hasLeggings());
                }
                if (reverseLeggingsMiddle != null) {
                    reverseLeggingsMiddle.setHidden(maid.hasLeggings());
                }
                if (reverseLeggingsRight != null) {
                    reverseLeggingsRight.setHidden(maid.hasLeggings());
                }
                if (reverseBootsLeft != null) {
                    reverseBootsLeft.setHidden(maid.hasBoots());
                }
                if (reverseBootsRight != null) {
                    reverseBootsRight.setHidden(maid.hasBoots());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorTempCold() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetTempCold = modelMap.get("helmetTempCold");
                ModelRendererWrapper chestPlateTempCold = modelMap.get("chestPlateTempCold");
                ModelRendererWrapper chestPlateLeftTempCold = modelMap.get("chestPlateLeftTempCold");
                ModelRendererWrapper chestPlateMiddleTempCold = modelMap.get("chestPlateMiddleTempCold");
                ModelRendererWrapper chestPlateRightTempCold = modelMap.get("chestPlateRightTempCold");
                ModelRendererWrapper leggingsTempCold = modelMap.get("leggingsTempCold");
                ModelRendererWrapper leggingsLeftTempCold = modelMap.get("leggingsLeftTempCold");
                ModelRendererWrapper leggingsMiddleTempCold = modelMap.get("leggingsMiddleTempCold");
                ModelRendererWrapper leggingsRightTempCold = modelMap.get("leggingsRightTempCold");
                ModelRendererWrapper bootsLeftTempCold = modelMap.get("bootsLeftTempCold");
                ModelRendererWrapper bootsRightTempCold = modelMap.get("bootsRightTempCold");

                boolean tempIsCold = "COLD".equals(maid.getAtBiomeTemp());

                if (helmetTempCold != null) {
                    helmetTempCold.setHidden(!tempIsCold);
                }
                if (chestPlateTempCold != null) {
                    chestPlateTempCold.setHidden(!tempIsCold);
                }
                if (chestPlateLeftTempCold != null) {
                    chestPlateLeftTempCold.setHidden(!tempIsCold);
                }
                if (chestPlateMiddleTempCold != null) {
                    chestPlateMiddleTempCold.setHidden(!tempIsCold);
                }
                if (chestPlateRightTempCold != null) {
                    chestPlateRightTempCold.setHidden(!tempIsCold);
                }
                if (leggingsTempCold != null) {
                    leggingsTempCold.setHidden(!tempIsCold);
                }
                if (leggingsLeftTempCold != null) {
                    leggingsLeftTempCold.setHidden(!tempIsCold);
                }
                if (leggingsMiddleTempCold != null) {
                    leggingsMiddleTempCold.setHidden(!tempIsCold);
                }
                if (leggingsRightTempCold != null) {
                    leggingsRightTempCold.setHidden(!tempIsCold);
                }
                if (bootsLeftTempCold != null) {
                    bootsLeftTempCold.setHidden(!tempIsCold);
                }
                if (bootsRightTempCold != null) {
                    bootsRightTempCold.setHidden(!tempIsCold);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorTempMedium() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetTempMedium = modelMap.get("helmetTempMedium");
                ModelRendererWrapper chestPlateTempMedium = modelMap.get("chestPlateTempMedium");
                ModelRendererWrapper chestPlateLeftTempMedium = modelMap.get("chestPlateLeftTempMedium");
                ModelRendererWrapper chestPlateMiddleTempMedium = modelMap.get("chestPlateMiddleTempMedium");
                ModelRendererWrapper chestPlateRightTempMedium = modelMap.get("chestPlateRightTempMedium");
                ModelRendererWrapper leggingsTempMedium = modelMap.get("leggingsTempMedium");
                ModelRendererWrapper leggingsLeftTempMedium = modelMap.get("leggingsLeftTempMedium");
                ModelRendererWrapper leggingsMiddleTempMedium = modelMap.get("leggingsMiddleTempMedium");
                ModelRendererWrapper leggingsRightTempMedium = modelMap.get("leggingsRightTempMedium");
                ModelRendererWrapper bootsLeftTempMedium = modelMap.get("bootsLeftTempMedium");
                ModelRendererWrapper bootsRightTempMedium = modelMap.get("bootsRightTempMedium");

                boolean tempIsMedium = "MEDIUM".equals(maid.getAtBiomeTemp());

                if (helmetTempMedium != null) {
                    helmetTempMedium.setHidden(!tempIsMedium);
                }
                if (chestPlateTempMedium != null) {
                    chestPlateTempMedium.setHidden(!tempIsMedium);
                }
                if (chestPlateLeftTempMedium != null) {
                    chestPlateLeftTempMedium.setHidden(!tempIsMedium);
                }
                if (chestPlateMiddleTempMedium != null) {
                    chestPlateMiddleTempMedium.setHidden(!tempIsMedium);
                }
                if (chestPlateRightTempMedium != null) {
                    chestPlateRightTempMedium.setHidden(!tempIsMedium);
                }
                if (leggingsTempMedium != null) {
                    leggingsTempMedium.setHidden(!tempIsMedium);
                }
                if (leggingsLeftTempMedium != null) {
                    leggingsLeftTempMedium.setHidden(!tempIsMedium);
                }
                if (leggingsMiddleTempMedium != null) {
                    leggingsMiddleTempMedium.setHidden(!tempIsMedium);
                }
                if (leggingsRightTempMedium != null) {
                    leggingsRightTempMedium.setHidden(!tempIsMedium);
                }
                if (bootsLeftTempMedium != null) {
                    bootsLeftTempMedium.setHidden(!tempIsMedium);
                }
                if (bootsRightTempMedium != null) {
                    bootsRightTempMedium.setHidden(!tempIsMedium);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorTempOcean() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetTempOcean = modelMap.get("helmetTempOcean");
                ModelRendererWrapper chestPlateTempOcean = modelMap.get("chestPlateTempOcean");
                ModelRendererWrapper chestPlateLeftTempOcean = modelMap.get("chestPlateLeftTempOcean");
                ModelRendererWrapper chestPlateMiddleTempOcean = modelMap.get("chestPlateMiddleTempOcean");
                ModelRendererWrapper chestPlateRightTempOcean = modelMap.get("chestPlateRightTempOcean");
                ModelRendererWrapper leggingsTempOcean = modelMap.get("leggingsTempOcean");
                ModelRendererWrapper leggingsLeftTempOcean = modelMap.get("leggingsLeftTempOcean");
                ModelRendererWrapper leggingsMiddleTempOcean = modelMap.get("leggingsMiddleTempOcean");
                ModelRendererWrapper leggingsRightTempOcean = modelMap.get("leggingsRightTempOcean");
                ModelRendererWrapper bootsLeftTempOcean = modelMap.get("bootsLeftTempOcean");
                ModelRendererWrapper bootsRightTempOcean = modelMap.get("bootsRightTempOcean");

                boolean tempIsOcean = "OCEAN".equals(maid.getAtBiomeTemp());

                if (helmetTempOcean != null) {
                    helmetTempOcean.setHidden(!tempIsOcean);
                }
                if (chestPlateTempOcean != null) {
                    chestPlateTempOcean.setHidden(!tempIsOcean);
                }
                if (chestPlateLeftTempOcean != null) {
                    chestPlateLeftTempOcean.setHidden(!tempIsOcean);
                }
                if (chestPlateMiddleTempOcean != null) {
                    chestPlateMiddleTempOcean.setHidden(!tempIsOcean);
                }
                if (chestPlateRightTempOcean != null) {
                    chestPlateRightTempOcean.setHidden(!tempIsOcean);
                }
                if (leggingsTempOcean != null) {
                    leggingsTempOcean.setHidden(!tempIsOcean);
                }
                if (leggingsLeftTempOcean != null) {
                    leggingsLeftTempOcean.setHidden(!tempIsOcean);
                }
                if (leggingsMiddleTempOcean != null) {
                    leggingsMiddleTempOcean.setHidden(!tempIsOcean);
                }
                if (leggingsRightTempOcean != null) {
                    leggingsRightTempOcean.setHidden(!tempIsOcean);
                }
                if (bootsLeftTempOcean != null) {
                    bootsLeftTempOcean.setHidden(!tempIsOcean);
                }
                if (bootsRightTempOcean != null) {
                    bootsRightTempOcean.setHidden(!tempIsOcean);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorTempWarm() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetTempWarm = modelMap.get("helmetTempWarm");
                ModelRendererWrapper chestPlateTempWarm = modelMap.get("chestPlateTempWarm");
                ModelRendererWrapper chestPlateLeftTempWarm = modelMap.get("chestPlateLeftTempWarm");
                ModelRendererWrapper chestPlateMiddleTempWarm = modelMap.get("chestPlateMiddleTempWarm");
                ModelRendererWrapper chestPlateRightTempWarm = modelMap.get("chestPlateRightTempWarm");
                ModelRendererWrapper leggingsTempWarm = modelMap.get("leggingsTempWarm");
                ModelRendererWrapper leggingsLeftTempWarm = modelMap.get("leggingsLeftTempWarm");
                ModelRendererWrapper leggingsMiddleTempWarm = modelMap.get("leggingsMiddleTempWarm");
                ModelRendererWrapper leggingsRightTempWarm = modelMap.get("leggingsRightTempWarm");
                ModelRendererWrapper bootsLeftTempWarm = modelMap.get("bootsLeftTempWarm");
                ModelRendererWrapper bootsRightTempWarm = modelMap.get("bootsRightTempWarm");

                boolean tempIsWarm = "WARM".equals(maid.getAtBiomeTemp());

                if (helmetTempWarm != null) {
                    helmetTempWarm.setHidden(!tempIsWarm);
                }
                if (chestPlateTempWarm != null) {
                    chestPlateTempWarm.setHidden(!tempIsWarm);
                }
                if (chestPlateLeftTempWarm != null) {
                    chestPlateLeftTempWarm.setHidden(!tempIsWarm);
                }
                if (chestPlateMiddleTempWarm != null) {
                    chestPlateMiddleTempWarm.setHidden(!tempIsWarm);
                }
                if (chestPlateRightTempWarm != null) {
                    chestPlateRightTempWarm.setHidden(!tempIsWarm);
                }
                if (leggingsTempWarm != null) {
                    leggingsTempWarm.setHidden(!tempIsWarm);
                }
                if (leggingsLeftTempWarm != null) {
                    leggingsLeftTempWarm.setHidden(!tempIsWarm);
                }
                if (leggingsMiddleTempWarm != null) {
                    leggingsMiddleTempWarm.setHidden(!tempIsWarm);
                }
                if (leggingsRightTempWarm != null) {
                    leggingsRightTempWarm.setHidden(!tempIsWarm);
                }
                if (bootsLeftTempWarm != null) {
                    bootsLeftTempWarm.setHidden(!tempIsWarm);
                }
                if (bootsRightTempWarm != null) {
                    bootsRightTempWarm.setHidden(!tempIsWarm);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorValueFull() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetValueFull = modelMap.get("helmetValueFull");
                ModelRendererWrapper chestPlateValueFull = modelMap.get("chestPlateValueFull");
                ModelRendererWrapper chestPlateLeftValueFull = modelMap.get("chestPlateLeftValueFull");
                ModelRendererWrapper chestPlateMiddleValueFull = modelMap.get("chestPlateMiddleValueFull");
                ModelRendererWrapper chestPlateRightValueFull = modelMap.get("chestPlateRightValueFull");
                ModelRendererWrapper leggingsValueFull = modelMap.get("leggingsValueFull");
                ModelRendererWrapper leggingsLeftValueFull = modelMap.get("leggingsLeftValueFull");
                ModelRendererWrapper leggingsMiddleValueFull = modelMap.get("leggingsMiddleValueFull");
                ModelRendererWrapper leggingsRightValueFull = modelMap.get("leggingsRightValueFull");
                ModelRendererWrapper bootsLeftValueFull = modelMap.get("bootsLeftValueFull");
                ModelRendererWrapper bootsRightValueFull = modelMap.get("bootsRightValueFull");

                boolean valueIsFull = 15 < maid.getArmorValue();

                if (helmetValueFull != null) {
                    helmetValueFull.setHidden(!valueIsFull);
                }
                if (chestPlateValueFull != null) {
                    chestPlateValueFull.setHidden(!valueIsFull);
                }
                if (chestPlateLeftValueFull != null) {
                    chestPlateLeftValueFull.setHidden(!valueIsFull);
                }
                if (chestPlateMiddleValueFull != null) {
                    chestPlateMiddleValueFull.setHidden(!valueIsFull);
                }
                if (chestPlateRightValueFull != null) {
                    chestPlateRightValueFull.setHidden(!valueIsFull);
                }
                if (leggingsValueFull != null) {
                    leggingsValueFull.setHidden(!valueIsFull);
                }
                if (leggingsLeftValueFull != null) {
                    leggingsLeftValueFull.setHidden(!valueIsFull);
                }
                if (leggingsMiddleValueFull != null) {
                    leggingsMiddleValueFull.setHidden(!valueIsFull);
                }
                if (leggingsRightValueFull != null) {
                    leggingsRightValueFull.setHidden(!valueIsFull);
                }
                if (bootsLeftValueFull != null) {
                    bootsLeftValueFull.setHidden(!valueIsFull);
                }
                if (bootsRightValueFull != null) {
                    bootsRightValueFull.setHidden(!valueIsFull);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorValueHigh() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetValueHigh = modelMap.get("helmetValueHigh");
                ModelRendererWrapper chestPlateValueHigh = modelMap.get("chestPlateValueHigh");
                ModelRendererWrapper chestPlateLeftValueHigh = modelMap.get("chestPlateLeftValueHigh");
                ModelRendererWrapper chestPlateMiddleValueHigh = modelMap.get("chestPlateMiddleValueHigh");
                ModelRendererWrapper chestPlateRightValueHigh = modelMap.get("chestPlateRightValueHigh");
                ModelRendererWrapper leggingsValueHigh = modelMap.get("leggingsValueHigh");
                ModelRendererWrapper leggingsLeftValueHigh = modelMap.get("leggingsLeftValueHigh");
                ModelRendererWrapper leggingsMiddleValueHigh = modelMap.get("leggingsMiddleValueHigh");
                ModelRendererWrapper leggingsRightValueHigh = modelMap.get("leggingsRightValueHigh");
                ModelRendererWrapper bootsLeftValueHigh = modelMap.get("bootsLeftValueHigh");
                ModelRendererWrapper bootsRightValueHigh = modelMap.get("bootsRightValueHigh");

                boolean valueIsHigh = (10 < maid.getArmorValue()) && (maid.getArmorValue() <= 15);

                if (helmetValueHigh != null) {
                    helmetValueHigh.setHidden(!valueIsHigh);
                }
                if (chestPlateValueHigh != null) {
                    chestPlateValueHigh.setHidden(!valueIsHigh);
                }
                if (chestPlateLeftValueHigh != null) {
                    chestPlateLeftValueHigh.setHidden(!valueIsHigh);
                }
                if (chestPlateMiddleValueHigh != null) {
                    chestPlateMiddleValueHigh.setHidden(!valueIsHigh);
                }
                if (chestPlateRightValueHigh != null) {
                    chestPlateRightValueHigh.setHidden(!valueIsHigh);
                }
                if (leggingsValueHigh != null) {
                    leggingsValueHigh.setHidden(!valueIsHigh);
                }
                if (leggingsLeftValueHigh != null) {
                    leggingsLeftValueHigh.setHidden(!valueIsHigh);
                }
                if (leggingsMiddleValueHigh != null) {
                    leggingsMiddleValueHigh.setHidden(!valueIsHigh);
                }
                if (leggingsRightValueHigh != null) {
                    leggingsRightValueHigh.setHidden(!valueIsHigh);
                }
                if (bootsLeftValueHigh != null) {
                    bootsLeftValueHigh.setHidden(!valueIsHigh);
                }
                if (bootsRightValueHigh != null) {
                    bootsRightValueHigh.setHidden(!valueIsHigh);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorValueLow() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetValueLow = modelMap.get("helmetValueLow");
                ModelRendererWrapper chestPlateValueLow = modelMap.get("chestPlateValueLow");
                ModelRendererWrapper chestPlateLeftValueLow = modelMap.get("chestPlateLeftValueLow");
                ModelRendererWrapper chestPlateMiddleValueLow = modelMap.get("chestPlateMiddleValueLow");
                ModelRendererWrapper chestPlateRightValueLow = modelMap.get("chestPlateRightValueLow");
                ModelRendererWrapper leggingsValueLow = modelMap.get("leggingsValueLow");
                ModelRendererWrapper leggingsLeftValueLow = modelMap.get("leggingsLeftValueLow");
                ModelRendererWrapper leggingsMiddleValueLow = modelMap.get("leggingsMiddleValueLow");
                ModelRendererWrapper leggingsRightValueLow = modelMap.get("leggingsRightValueLow");
                ModelRendererWrapper bootsLeftValueLow = modelMap.get("bootsLeftValueLow");
                ModelRendererWrapper bootsRightValueLow = modelMap.get("bootsRightValueLow");

                boolean valueIsLow = (0 < maid.getArmorValue()) && (maid.getArmorValue() <= 5);

                if (helmetValueLow != null) {
                    helmetValueLow.setHidden(!valueIsLow);
                }
                if (chestPlateValueLow != null) {
                    chestPlateValueLow.setHidden(!valueIsLow);
                }
                if (chestPlateLeftValueLow != null) {
                    chestPlateLeftValueLow.setHidden(!valueIsLow);
                }
                if (chestPlateMiddleValueLow != null) {
                    chestPlateMiddleValueLow.setHidden(!valueIsLow);
                }
                if (chestPlateRightValueLow != null) {
                    chestPlateRightValueLow.setHidden(!valueIsLow);
                }
                if (leggingsValueLow != null) {
                    leggingsValueLow.setHidden(!valueIsLow);
                }
                if (leggingsLeftValueLow != null) {
                    leggingsLeftValueLow.setHidden(!valueIsLow);
                }
                if (leggingsMiddleValueLow != null) {
                    leggingsMiddleValueLow.setHidden(!valueIsLow);
                }
                if (leggingsRightValueLow != null) {
                    leggingsRightValueLow.setHidden(!valueIsLow);
                }
                if (bootsLeftValueLow != null) {
                    bootsLeftValueLow.setHidden(!valueIsLow);
                }
                if (bootsRightValueLow != null) {
                    bootsRightValueLow.setHidden(!valueIsLow);
                }
            }
        };
    }


    public static IAnimation<EntityMaid> getArmorValueNormal() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetValueNormal = modelMap.get("helmetValueNormal");
                ModelRendererWrapper chestPlateValueNormal = modelMap.get("chestPlateValueNormal");
                ModelRendererWrapper chestPlateLeftValueNormal = modelMap.get("chestPlateLeftValueNormal");
                ModelRendererWrapper chestPlateMiddleValueNormal = modelMap.get("chestPlateMiddleValueNormal");
                ModelRendererWrapper chestPlateRightValueNormal = modelMap.get("chestPlateRightValueNormal");
                ModelRendererWrapper leggingsValueNormal = modelMap.get("leggingsValueNormal");
                ModelRendererWrapper leggingsLeftValueNormal = modelMap.get("leggingsLeftValueNormal");
                ModelRendererWrapper leggingsMiddleValueNormal = modelMap.get("leggingsMiddleValueNormal");
                ModelRendererWrapper leggingsRightValueNormal = modelMap.get("leggingsRightValueNormal");
                ModelRendererWrapper bootsLeftValueNormal = modelMap.get("bootsLeftValueNormal");
                ModelRendererWrapper bootsRightValueNormal = modelMap.get("bootsRightValueNormal");

                boolean valueIsNormal = (5 < maid.getArmorValue()) && (maid.getArmorValue() <= 10);

                if (helmetValueNormal != null) {
                    helmetValueNormal.setHidden(!valueIsNormal);
                }
                if (chestPlateValueNormal != null) {
                    chestPlateValueNormal.setHidden(!valueIsNormal);
                }
                if (chestPlateLeftValueNormal != null) {
                    chestPlateLeftValueNormal.setHidden(!valueIsNormal);
                }
                if (chestPlateMiddleValueNormal != null) {
                    chestPlateMiddleValueNormal.setHidden(!valueIsNormal);
                }
                if (chestPlateRightValueNormal != null) {
                    chestPlateRightValueNormal.setHidden(!valueIsNormal);
                }
                if (leggingsValueNormal != null) {
                    leggingsValueNormal.setHidden(!valueIsNormal);
                }
                if (leggingsLeftValueNormal != null) {
                    leggingsLeftValueNormal.setHidden(!valueIsNormal);
                }
                if (leggingsMiddleValueNormal != null) {
                    leggingsMiddleValueNormal.setHidden(!valueIsNormal);
                }
                if (leggingsRightValueNormal != null) {
                    leggingsRightValueNormal.setHidden(!valueIsNormal);
                }
                if (bootsLeftValueNormal != null) {
                    bootsLeftValueNormal.setHidden(!valueIsNormal);
                }
                if (bootsRightValueNormal != null) {
                    bootsRightValueNormal.setHidden(!valueIsNormal);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getArmorWeatherRaining() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetWeatherRaining = modelMap.get("helmetWeatherRaining");
                ModelRendererWrapper chestPlateWeatherRaining = modelMap.get("chestPlateWeatherRaining");
                ModelRendererWrapper chestPlateLeftWeatherRaining = modelMap.get("chestPlateLeftWeatherRaining");
                ModelRendererWrapper chestPlateMiddleWeatherRaining = modelMap.get("chestPlateMiddleWeatherRaining");
                ModelRendererWrapper chestPlateRightWeatherRaining = modelMap.get("chestPlateRightWeatherRaining");
                ModelRendererWrapper leggingsWeatherRaining = modelMap.get("leggingsWeatherRaining");
                ModelRendererWrapper leggingsLeftWeatherRaining = modelMap.get("leggingsLeftWeatherRaining");
                ModelRendererWrapper leggingsMiddleWeatherRaining = modelMap.get("leggingsMiddleWeatherRaining");
                ModelRendererWrapper leggingsRightWeatherRaining = modelMap.get("leggingsRightWeatherRaining");
                ModelRendererWrapper bootsLeftWeatherRaining = modelMap.get("bootsLeftWeatherRaining");
                ModelRendererWrapper bootsRightWeatherRaining = modelMap.get("bootsRightWeatherRaining");

                boolean weatherIsRaining = maid.world.isRaining();

                if (helmetWeatherRaining != null) {
                    helmetWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (chestPlateWeatherRaining != null) {
                    chestPlateWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (chestPlateLeftWeatherRaining != null) {
                    chestPlateLeftWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (chestPlateMiddleWeatherRaining != null) {
                    chestPlateMiddleWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (chestPlateRightWeatherRaining != null) {
                    chestPlateRightWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (leggingsWeatherRaining != null) {
                    leggingsWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (leggingsLeftWeatherRaining != null) {
                    leggingsLeftWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (leggingsMiddleWeatherRaining != null) {
                    leggingsMiddleWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (leggingsRightWeatherRaining != null) {
                    leggingsRightWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (bootsLeftWeatherRaining != null) {
                    bootsLeftWeatherRaining.setHidden(!weatherIsRaining);
                }
                if (bootsRightWeatherRaining != null) {
                    bootsRightWeatherRaining.setHidden(!weatherIsRaining);
                }
            }
        };
    }


    public static IAnimation<EntityMaid> getArmorWeatherThundering() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper helmetWeatherThundering = modelMap.get("helmetWeatherThundering");
                ModelRendererWrapper chestPlateWeatherThundering = modelMap.get("chestPlateWeatherThundering");
                ModelRendererWrapper chestPlateLeftWeatherThundering = modelMap.get("chestPlateLeftWeatherThundering");
                ModelRendererWrapper chestPlateMiddleWeatherThundering = modelMap.get("chestPlateMiddleWeatherThundering");
                ModelRendererWrapper chestPlateRightWeatherThundering = modelMap.get("chestPlateRightWeatherThundering");
                ModelRendererWrapper leggingsWeatherThundering = modelMap.get("leggingsWeatherThundering");
                ModelRendererWrapper leggingsLeftWeatherThundering = modelMap.get("leggingsLeftWeatherThundering");
                ModelRendererWrapper leggingsMiddleWeatherThundering = modelMap.get("leggingsMiddleWeatherThundering");
                ModelRendererWrapper leggingsRightWeatherThundering = modelMap.get("leggingsRightWeatherThundering");
                ModelRendererWrapper bootsLeftWeatherThundering = modelMap.get("bootsLeftWeatherThundering");
                ModelRendererWrapper bootsRightWeatherThundering = modelMap.get("bootsRightWeatherThundering");

                boolean weatherIsThundering = maid.world.isThundering();

                if (helmetWeatherThundering != null) {
                    helmetWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (chestPlateWeatherThundering != null) {
                    chestPlateWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (chestPlateLeftWeatherThundering != null) {
                    chestPlateLeftWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (chestPlateMiddleWeatherThundering != null) {
                    chestPlateMiddleWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (chestPlateRightWeatherThundering != null) {
                    chestPlateRightWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (leggingsWeatherThundering != null) {
                    leggingsWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (leggingsLeftWeatherThundering != null) {
                    leggingsLeftWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (leggingsMiddleWeatherThundering != null) {
                    leggingsMiddleWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (leggingsRightWeatherThundering != null) {
                    leggingsRightWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (bootsLeftWeatherThundering != null) {
                    bootsLeftWeatherThundering.setHidden(!weatherIsThundering);
                }
                if (bootsRightWeatherThundering != null) {
                    bootsRightWeatherThundering.setHidden(!weatherIsThundering);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHealthLessShow() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper healthLessQuarterShow = modelMap.get("healthLessQuarterShow");
                ModelRendererWrapper healthLessHalfShow = modelMap.get("healthLessHalfShow");
                ModelRendererWrapper healthLessThreeQuartersShow = modelMap.get("healthLessThreeQuartersShow");

                double i = maid.getHealth() / maid.getMaxHealth();

                if (healthLessQuarterShow != null) {
                    healthLessQuarterShow.setHidden(i > 0.25);
                }

                if (healthLessHalfShow != null) {
                    healthLessHalfShow.setHidden(i > 0.5);
                }

                if (healthLessThreeQuartersShow != null) {
                    healthLessThreeQuartersShow.setHidden(i > 0.75);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHealthMoreShow() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper healthMoreQuarterShow = modelMap.get("healthMoreQuarterShow");
                ModelRendererWrapper healthMoreHalfShow = modelMap.get("healthMoreHalfShow");
                ModelRendererWrapper healthMoreThreeQuartersShow = modelMap.get("healthMoreThreeQuartersShow");

                double i = maid.getHealth() / maid.getMaxHealth();

                if (healthMoreQuarterShow != null) {
                    healthMoreQuarterShow.setHidden(i <= 0.25);
                }

                if (healthMoreHalfShow != null) {
                    healthMoreHalfShow.setHidden(i <= 0.5);
                }

                if (healthMoreThreeQuartersShow != null) {
                    healthMoreThreeQuartersShow.setHidden(i <= 0.75);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHealthRotation() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper healthRotationX90 = modelMap.get("healthRotationX90");

                if (healthRotationX90 != null) {
                    double deg = (Math.PI / 4) - (Math.PI / 2) * (maid.getHealth() / maid.getMaxHealth());
                    healthRotationX90.setRotateAngleX((float) deg + healthRotationX90.getInitRotateAngleX());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHairPonytailSwing() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper hairPonytailSwing = modelMap.get("hairPonytailSwing");

                if (hairPonytailSwing != null) {
                    float rotationZ = (float) Math.sin(ageInTicks * 0.05) * 0.06f;
                    hairPonytailSwing.setRotateAngleZ(rotationZ + hairPonytailSwing.getInitRotateAngleZ());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getHairSwing() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper hairLeftSwing = modelMap.get("hairLeftSwing");
                ModelRendererWrapper hairRightSwing = modelMap.get("hairRightSwing");

                float rotationZ = (float) Math.sin(ageInTicks * 0.05) * 0.04f;
                if (hairLeftSwing != null) {
                    hairLeftSwing.setRotateAngleZ(hairLeftSwing.getInitRotateAngleZ() + rotationZ);
                }
                if (hairRightSwing != null) {
                    hairRightSwing.setRotateAngleZ(hairRightSwing.getInitRotateAngleZ() - rotationZ);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getEarShake() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper earLeftShake = modelMap.get("earLeftShake");
                ModelRendererWrapper earRightShake = modelMap.get("earRightShake");

                float time = (ageInTicks + Math.abs(maid.getUniqueID().getLeastSignificantBits()) % 10) % 40;
                if (time < Math.PI * 4) {
                    float rotationZ = (float) Math.abs(Math.sin(time * 0.25)) * 0.4f;
                    if (earLeftShake != null) {
                        earLeftShake.setRotateAngleZ(earLeftShake.getInitRotateAngleZ() + rotationZ);
                    }
                    if (earRightShake != null) {
                        earRightShake.setRotateAngleZ(earRightShake.getInitRotateAngleZ() - rotationZ);
                    }
                } else {
                    if (earLeftShake != null) {
                        earLeftShake.setRotateAngleZ(earLeftShake.getInitRotateAngleZ());
                    }
                    if (earRightShake != null) {
                        earRightShake.setRotateAngleZ(earRightShake.getInitRotateAngleZ());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getEarBegShake() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper earLeftShake = modelMap.get("earLeftShake");
                ModelRendererWrapper earRightShake = modelMap.get("earRightShake");

                float time = (ageInTicks + Math.abs(maid.getUniqueID().getLeastSignificantBits()) % 10) % 40;
                if (maid.isBegging() && time < Math.PI * 4) {
                    float rotationZ = (float) Math.abs(Math.sin(time * 0.25)) * 0.4f;
                    if (earLeftShake != null) {
                        earLeftShake.setRotateAngleZ(earLeftShake.getInitRotateAngleZ() + rotationZ);
                    }
                    if (earRightShake != null) {
                        earRightShake.setRotateAngleZ(earRightShake.getInitRotateAngleZ() - rotationZ);
                    }
                } else {
                    if (earLeftShake != null) {
                        earLeftShake.setRotateAngleZ(earLeftShake.getInitRotateAngleZ());
                    }
                    if (earRightShake != null) {
                        earRightShake.setRotateAngleZ(earRightShake.getInitRotateAngleZ());
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getStatusBackpack() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper backpackShow = modelMap.get("backpackShow");
                ModelRendererWrapper backpackHidden = modelMap.get("backpackHidden");

                if (backpackShow != null) {
                    backpackShow.setHidden(!maid.hasBackpack());
                }
                if (backpackHidden != null) {
                    backpackHidden.setHidden(maid.hasBackpack());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getStatusBackpackLevel() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper backpackLevelEmpty = modelMap.get("backpackLevelEmpty");
                ModelRendererWrapper backpackLevelSmall = modelMap.get("backpackLevelSmall");
                ModelRendererWrapper backpackLevelMiddle = modelMap.get("backpackLevelMiddle");
                ModelRendererWrapper backpackLevelBig = modelMap.get("backpackLevelBig");

                int level = maid.getBackpackLevel();

                if (backpackLevelEmpty != null) {
                    backpackLevelEmpty.setHidden(level != 0);
                }

                if (backpackLevelSmall != null) {
                    backpackLevelSmall.setHidden(level != 1);
                }

                if (backpackLevelMiddle != null) {
                    backpackLevelMiddle.setHidden(level != 2);
                }

                if (backpackLevelBig != null) {
                    backpackLevelBig.setHidden(level != 3);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getStatusSasimono() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sasimonoShow = modelMap.get("sasimonoShow");
                ModelRendererWrapper sasimonoHidden = modelMap.get("sasimonoHidden");

                if (sasimonoShow != null) {
                    sasimonoShow.setHidden(!maid.hasSasimono());
                }
                if (sasimonoHidden != null) {
                    sasimonoHidden.setHidden(maid.hasSasimono());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTailDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper tail = modelMap.get("tail");

                if (tail != null) {
                    tail.setRotateAngleX((float) (Math.sin(ageInTicks * 0.2) * 0.05) + tail.getInitRotateAngleX());
                    tail.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.2) * 0.1) + tail.getInitRotateAngleZ());

                    tail.setHidden(maid.isSleep());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskAttack() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper attackHidden = modelMap.get("attackHidden");

                if (attackHidden != null) {
                    attackHidden.setHidden("attack".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper attackShow = modelMap.get("attackShow");
                if (attackShow != null) {
                    attackShow.setHidden(!"attack".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskDanmakuAttack() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper danmakuAttackHidden = modelMap.get("danmakuAttackHidden");

                if (danmakuAttackHidden != null) {
                    danmakuAttackHidden.setHidden("danmaku_attack".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper danmakuAttackShow = modelMap.get("danmakuAttackShow");
                if (danmakuAttackShow != null) {
                    danmakuAttackShow.setHidden(!"danmaku_attack".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskFarm() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper farmHidden = modelMap.get("farmHidden");

                if (farmHidden != null) {
                    farmHidden.setHidden("farm".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper farmShow = modelMap.get("farmShow");
                if (farmShow != null) {
                    farmShow.setHidden(!"farm".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskFeedAnimal() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper feedAnimalHidden = modelMap.get("feedAnimalHidden");

                if (feedAnimalHidden != null) {
                    feedAnimalHidden.setHidden("feed_animal".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper feedAnimalShow = modelMap.get("feedAnimalShow");
                if (feedAnimalShow != null) {
                    feedAnimalShow.setHidden(!"feed_animal".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskIdle() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper idleHidden = modelMap.get("idleHidden");

                if (idleHidden != null) {
                    idleHidden.setHidden("idle".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper idleShow = modelMap.get("idleShow");
                if (idleShow != null) {
                    idleShow.setHidden(!"idle".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskMilk() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper milkHidden = modelMap.get("milkHidden");

                if (milkHidden != null) {
                    milkHidden.setHidden("milk".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper milkShow = modelMap.get("milkShow");
                if (milkShow != null) {
                    milkShow.setHidden(!"milk".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskShears() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper shearsHidden = modelMap.get("shearsHidden");

                if (shearsHidden != null) {
                    shearsHidden.setHidden("shears".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper shearsShow = modelMap.get("shearsShow");
                if (shearsShow != null) {
                    shearsShow.setHidden(!"shears".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskSugarCane() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sugarCaneHidden = modelMap.get("sugarCaneHidden");

                if (sugarCaneHidden != null) {
                    sugarCaneHidden.setHidden("sugar_cane".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper sugarCaneShow = modelMap.get("sugarCaneShow");
                if (sugarCaneShow != null) {
                    sugarCaneShow.setHidden(!"sugar_cane".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskCocoa() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper cocoaHidden = modelMap.get("cocoaHidden");

                if (cocoaHidden != null) {
                    cocoaHidden.setHidden("cocoa".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper cocoaShow = modelMap.get("cocoaShow");
                if (cocoaShow != null) {
                    cocoaShow.setHidden(!"cocoa".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskExtinguishing() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper extinguishingHidden = modelMap.get("extinguishingHidden");

                if (extinguishingHidden != null) {
                    extinguishingHidden.setHidden("extinguishing".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper extinguishingShow = modelMap.get("extinguishingShow");
                if (extinguishingShow != null) {
                    extinguishingShow.setHidden(!"extinguishing".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskFeed() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper feedHidden = modelMap.get("feedHidden");

                if (feedHidden != null) {
                    feedHidden.setHidden("feed".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper feedShow = modelMap.get("feedShow");
                if (feedShow != null) {
                    feedShow.setHidden(!"feed".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskGrass() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper grassHidden = modelMap.get("grassHidden");

                if (grassHidden != null) {
                    grassHidden.setHidden("grass".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper grassShow = modelMap.get("grassShow");
                if (grassShow != null) {
                    grassShow.setHidden(!"grass".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskMelon() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper melonHidden = modelMap.get("melonHidden");

                if (melonHidden != null) {
                    melonHidden.setHidden("melon".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper melonShow = modelMap.get("melonShow");
                if (melonShow != null) {
                    melonShow.setHidden(!"melon".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskRangedAttack() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper rangedAttackHidden = modelMap.get("rangedAttackHidden");

                if (rangedAttackHidden != null) {
                    rangedAttackHidden.setHidden("ranged_attack".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper rangedAttackShow = modelMap.get("rangedAttackShow");
                if (rangedAttackShow != null) {
                    rangedAttackShow.setHidden(!"ranged_attack".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskSnow() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper snowHidden = modelMap.get("snowHidden");

                if (snowHidden != null) {
                    snowHidden.setHidden("snow".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper snowShow = modelMap.get("snowShow");
                if (snowShow != null) {
                    snowShow.setHidden(!"snow".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getTaskTorch() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper torchHidden = modelMap.get("torchHidden");

                if (torchHidden != null) {
                    torchHidden.setHidden("torch".equals(maid.getTask().getUid().getPath()));
                }

                ModelRendererWrapper torchShow = modelMap.get("torchShow");
                if (torchShow != null) {
                    torchShow.setHidden(!"torch".equals(maid.getTask().getUid().getPath()));
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getWingDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper wingLeft = modelMap.get("wingLeft");
                ModelRendererWrapper wingRight = modelMap.get("wingRight");

                if (wingLeft != null) {
                    wingLeft.setRotateAngleY((float) (-Math.cos(ageInTicks * 0.3) * 0.2 + wingLeft.getInitRotateAngleY()));
                    wingLeft.setHidden(maid.isSleep());
                }
                if (wingRight != null) {
                    wingRight.setRotateAngleY((float) (Math.cos(ageInTicks * 0.3) * 0.2 + wingRight.getInitRotateAngleY()));
                    wingRight.setHidden(maid.isSleep());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSleepDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sleepHide = modelMap.get("sleepHide");
                ModelRendererWrapper sleepShow = modelMap.get("sleepShow");

                if (sleepHide != null) {
                    sleepHide.setHidden(maid.isSleep());
                }

                if (sleepShow != null) {
                    sleepShow.setHidden(!maid.isSleep());
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSpecialHecatia() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper earthHair = modelMap.get("earthHair");
                ModelRendererWrapper logoEarth = modelMap.get("logoEarth");
                ModelRendererWrapper earthTop = modelMap.get("earthTop");
                ModelRendererWrapper earthSideLeft = modelMap.get("earthSideLeft");
                ModelRendererWrapper earthSideRight = modelMap.get("earthSideRight");

                ModelRendererWrapper moonHair = modelMap.get("moonHair");
                ModelRendererWrapper logoMoon = modelMap.get("logoMoon");
                ModelRendererWrapper moonTop = modelMap.get("moonTop");
                ModelRendererWrapper moonSideLeft = modelMap.get("moonSideLeft");
                ModelRendererWrapper moonSideRight = modelMap.get("moonSideRight");

                ModelRendererWrapper otherHair = modelMap.get("otherHair");
                ModelRendererWrapper logoOther = modelMap.get("logoOther");
                ModelRendererWrapper otherTop = modelMap.get("otherTop");
                ModelRendererWrapper otherSideLeft = modelMap.get("otherSideLeft");
                ModelRendererWrapper otherSideRight = modelMap.get("otherSideRight");

                int dim = maid.dimension;
                if (dim == 0) {
                    earthHair.setHidden(false);
                    logoEarth.setHidden(false);
                    earthTop.setHidden(false);
                    earthSideLeft.setHidden(true);
                    earthSideRight.setHidden(true);

                    moonHair.setHidden(true);
                    logoMoon.setHidden(true);
                    moonTop.setHidden(true);
                    moonSideLeft.setHidden(true);
                    moonSideRight.setHidden(false);

                    otherHair.setHidden(true);
                    logoOther.setHidden(true);
                    otherTop.setHidden(true);
                    otherSideLeft.setHidden(false);
                    otherSideRight.setHidden(true);
                } else if (dim == 1) {
                    earthHair.setHidden(true);
                    logoEarth.setHidden(true);
                    earthTop.setHidden(true);
                    earthSideLeft.setHidden(false);
                    earthSideRight.setHidden(true);

                    moonHair.setHidden(false);
                    logoMoon.setHidden(false);
                    moonTop.setHidden(false);
                    moonSideLeft.setHidden(true);
                    moonSideRight.setHidden(true);

                    otherHair.setHidden(true);
                    logoOther.setHidden(true);
                    otherTop.setHidden(true);
                    otherSideLeft.setHidden(true);
                    otherSideRight.setHidden(false);
                } else {
                    earthHair.setHidden(true);
                    logoEarth.setHidden(true);
                    earthTop.setHidden(true);
                    earthSideLeft.setHidden(false);
                    earthSideRight.setHidden(true);

                    moonHair.setHidden(true);
                    logoMoon.setHidden(true);
                    moonTop.setHidden(true);
                    moonSideLeft.setHidden(true);
                    moonSideRight.setHidden(false);

                    otherHair.setHidden(false);
                    logoOther.setHidden(false);
                    otherTop.setHidden(false);
                    otherSideLeft.setHidden(true);
                    otherSideRight.setHidden(true);
                }

                if (maid.hasHelmet()) {
                    earthTop.setHidden(true);
                    moonTop.setHidden(true);
                    otherTop.setHidden(true);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getSpecialWakasagihime() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                if (maid.isSitting()) {
                    if (armLeft != null) {
                        armLeft.setRotateAngleX(-0.798f);
                        armLeft.setRotateAngleZ(0.274f);
                    }
                    if (armRight != null) {
                        armRight.setRotateAngleX(-0.798f);
                        armRight.setRotateAngleZ(-0.274f);
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getPlayerArmDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                double f1 = 1.0 - Math.pow(1.0 - maid.swingProgress, 4);
                double f2 = Math.sin(f1 * Math.PI);
                double f3 = Math.sin(maid.swingProgress * Math.PI) * -0.7 * 0.75;

                if (armLeft != null) {
                    if (maid.isSitInJoyBlock()) {
                        armLeft.setRotateAngleX(-1.8f);
                    } else if (isHoldTrolley(maid)) {
                        armLeft.setRotateAngleX(0.5f);
                        armLeft.setRotateAngleY(0);
                        armLeft.setRotateAngleZ(-0.395f);
                    } else if (isHoldVehicle(maid)) {
                        float[] rotation = getLeftHandRotation(maid);
                        armLeft.setRotateAngleX(rotation[0]);
                        armLeft.setRotateAngleY(rotation[1]);
                        armLeft.setRotateAngleZ(rotation[2]);
                    } else {
                        armLeft.setRotateAngleX((float) (-Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armLeft.setRotateAngleY(0);
                        armLeft.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.05) * 0.025 - 0.05));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && isSwingLeftHand(maid)) {
                            armLeft.setRotateAngleX((float) (armLeft.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armLeft.setRotateAngleZ(armLeft.getRotateAngleZ() + (float) (Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }

                if (armRight != null) {
                    if (maid.isSitInJoyBlock()) {
                        armRight.setRotateAngleX(-1.8f);
                    } else if (isHoldVehicle(maid)) {
                        float[] rotation = getRightHandRotation(maid);
                        armRight.setRotateAngleX(rotation[0]);
                        armRight.setRotateAngleY(rotation[1]);
                        armRight.setRotateAngleZ(rotation[2]);
                    } else {
                        armRight.setRotateAngleX((float) (Math.cos(limbSwing * 0.67) * 0.7 * limbSwingAmount));
                        armRight.setRotateAngleY(0);
                        armRight.setRotateAngleZ((float) (-Math.cos(ageInTicks * 0.05) * 0.025 + 0.05));
                        // 手部使用动画
                        if (maid.swingProgress > 0.0 && !isSwingLeftHand(maid)) {
                            armRight.setRotateAngleX((float) (armRight.getRotateAngleX() - (f2 * 1.2 + f3)));
                            armRight.setRotateAngleZ((float) (armRight.getRotateAngleZ() + Math.sin(maid.swingProgress * Math.PI) * -0.4));
                        }
                    }
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getPlayerSitDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper head = modelMap.get("head");
                ModelRendererWrapper legLeft = modelMap.get("legLeft");
                ModelRendererWrapper legRight = modelMap.get("legRight");
                ModelRendererWrapper armLeft = modelMap.get("armLeft");
                ModelRendererWrapper armRight = modelMap.get("armRight");

                // 头部复位
                if (head != null) {
                    head.setOffsetY(0);
                }

                if (isRidingMarisaBroom(maid)) {
                    // 坐在扫帚上时，应用待命的动作
                    playerRidingBroomPosture(head, armLeft, armRight, legLeft, legRight);
                } else if (maid.isRiding()) {
                    playerRidingPosture(legLeft, legRight);
                } else if (maid.isSitting()) {
                    playerSittingPosture(armLeft, armRight, legLeft, legRight);
                }
            }
        };
    }

    public static IAnimation<EntityMaid> getMaidDefault() {
        return new IAnimation<EntityMaid>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityMaid maid, HashMap<String, ModelRendererWrapper> modelMap) {
                getHeadDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getHeadBlink().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getHeadBeg().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getHeadMusicShake().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getLegDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getArmDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getArmSwing().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getArmVertical().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getSitDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getArmorDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getArmorReverse().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getWingDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getTailDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getSitSkirtRotation().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
                getBaseFloatDefault().setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, maid, modelMap);
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseDimDefault() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                int dim = entity.dimension;

                ModelRendererWrapper overWorldHidden = modelMap.get("overWorldHidden");
                ModelRendererWrapper overWorldShow = modelMap.get("overWorldShow");
                ModelRendererWrapper netherWorldHidden = modelMap.get("netherWorldHidden");
                ModelRendererWrapper netherWorldShow = modelMap.get("netherWorldShow");
                ModelRendererWrapper endWorldHidden = modelMap.get("endWorldHidden");
                ModelRendererWrapper endWorldShow = modelMap.get("endWorldShow");

                if (overWorldHidden != null) {
                    overWorldHidden.setHidden(dim == 0);
                }
                if (overWorldShow != null) {
                    overWorldShow.setHidden(dim != 0);
                }
                if (netherWorldHidden != null) {
                    netherWorldHidden.setHidden(dim == -1);
                }
                if (netherWorldShow != null) {
                    netherWorldShow.setHidden(dim != -1);
                }
                if (endWorldHidden != null) {
                    endWorldHidden.setHidden(dim == 1);
                }
                if (endWorldShow != null) {
                    endWorldShow.setHidden(dim != 1);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseFloatDefault() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper sinFloat = modelMap.get("sinFloat");
                ModelRendererWrapper cosFloat = modelMap.get("cosFloat");
                ModelRendererWrapper negativeSinFloat = modelMap.get("_sinFloat");
                ModelRendererWrapper negativeCosFloat = modelMap.get("_cosFloat");

                if (sinFloat != null) {
                    sinFloat.setOffsetY((float) (Math.sin(ageInTicks * 0.1) * 0.05));
                }
                if (cosFloat != null) {
                    cosFloat.setOffsetY((float) (Math.cos(ageInTicks * 0.1) * 0.05));
                }
                if (negativeSinFloat != null) {
                    negativeSinFloat.setOffsetY((float) (-Math.sin(ageInTicks * 0.1) * 0.05));
                }
                if (negativeCosFloat != null) {
                    negativeCosFloat.setOffsetY((float) (-Math.cos(ageInTicks * 0.1) * 0.05));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseTimeDayNight() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                World world = entity.world;
                ModelRendererWrapper dayShow = modelMap.get("dayShow");
                ModelRendererWrapper nightShow = modelMap.get("nightShow");

                if (dayShow != null) {
                    dayShow.setHidden(world.getWorldTime() >= 13000);
                }

                if (nightShow != null) {
                    nightShow.setHidden(world.getWorldTime() < 13000);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseTimeGameRotation() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                long time = entity.world.getWorldTime();
                float hourDeg = (float) (Math.PI + ((time / 1000) % 12) * (Math.PI / 6));
                float minDeg = (float) (((time % 1000) / (50 / 3)) * (Math.PI / 30));

                ModelRendererWrapper gameHourRotationX = modelMap.get("gameHourRotationX");
                ModelRendererWrapper gameMinuteRotationX = modelMap.get("gameMinuteRotationX");
                ModelRendererWrapper gameHourRotationY = modelMap.get("gameHourRotationY");
                ModelRendererWrapper gameMinuteRotationY = modelMap.get("gameMinuteRotationY");
                ModelRendererWrapper gameHourRotationZ = modelMap.get("gameHourRotationZ");
                ModelRendererWrapper gameMinuteRotationZ = modelMap.get("gameMinuteRotationZ");

                if (gameHourRotationX != null) {
                    gameHourRotationX.setRotateAngleX(hourDeg);
                }

                if (gameMinuteRotationX != null) {
                    gameMinuteRotationX.setRotateAngleX(minDeg);
                }

                if (gameHourRotationY != null) {
                    gameHourRotationY.setRotateAngleY(hourDeg);
                }

                if (gameMinuteRotationY != null) {
                    gameMinuteRotationY.setRotateAngleY(minDeg);
                }

                if (gameHourRotationZ != null) {
                    gameHourRotationZ.setRotateAngleZ(hourDeg);
                }

                if (gameMinuteRotationZ != null) {
                    gameMinuteRotationZ.setRotateAngleZ(minDeg);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseTimeSysRotation() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                Date date = new Date();
                float hourDeg = (float) (((date.getHours() + date.getMinutes() / 60) % 12) * (Math.PI / 6));
                float minDeg = (float) ((date.getMinutes() + date.getSeconds() / 60) * (Math.PI / 30));
                float secDeg = (float) (date.getSeconds() * (Math.PI / 30));

                ModelRendererWrapper systemHourRotationX = modelMap.get("systemHourRotationX");
                ModelRendererWrapper systemMinuteRotationX = modelMap.get("systemMinuteRotationX");
                ModelRendererWrapper systemSecondRotationX = modelMap.get("systemSecondRotationX");
                ModelRendererWrapper systemHourRotationY = modelMap.get("systemHourRotationY");
                ModelRendererWrapper systemMinuteRotationY = modelMap.get("systemMinuteRotationY");
                ModelRendererWrapper systemSecondRotationY = modelMap.get("systemSecondRotationY");
                ModelRendererWrapper systemHourRotationZ = modelMap.get("systemHourRotationZ");
                ModelRendererWrapper systemMinuteRotationZ = modelMap.get("systemMinuteRotationZ");
                ModelRendererWrapper systemSecondRotationZ = modelMap.get("systemSecondRotationZ");

                if (systemHourRotationX != null) {
                    systemHourRotationX.setRotateAngleX(hourDeg);
                }

                if (systemMinuteRotationX != null) {
                    systemMinuteRotationX.setRotateAngleX(minDeg);
                }

                if (systemSecondRotationX != null) {
                    systemSecondRotationX.setRotateAngleX(secDeg);
                }

                if (systemHourRotationY != null) {
                    systemHourRotationY.setRotateAngleY(hourDeg);
                }

                if (systemMinuteRotationY != null) {
                    systemMinuteRotationY.setRotateAngleY(minDeg);
                }

                if (systemSecondRotationY != null) {
                    systemSecondRotationY.setRotateAngleY(secDeg);
                }

                if (systemHourRotationZ != null) {
                    systemHourRotationZ.setRotateAngleZ(hourDeg);
                }

                if (systemMinuteRotationZ != null) {
                    systemMinuteRotationZ.setRotateAngleZ(minDeg);
                }

                if (systemSecondRotationZ != null) {
                    systemSecondRotationZ.setRotateAngleZ(secDeg);
                }
            }
        };
    }

    public static IAnimation<EntityChair> getPassengerHidden() {
        return new IAnimation<EntityChair>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityChair chair, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper passengerHidden = modelMap.get("passengerHidden");
                ModelRendererWrapper passengerShow = modelMap.get("passengerShow");

                if (passengerHidden != null) {
                    passengerHidden.setHidden(chair.hasPassenger());
                }
                if (passengerShow != null) {
                    passengerShow.setHidden(!chair.hasPassenger());
                }
            }
        };
    }

    public static IAnimation<EntityChair> getPassengerRotation() {
        return new IAnimation<EntityChair>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityChair chair, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper passengerRotationYaw = modelMap.get("passengerRotationYaw");
                ModelRendererWrapper passengerRotationPitch = modelMap.get("passengerRotationPitch");

                if (passengerRotationYaw != null) {
                    passengerRotationYaw.setRotateAngleY((chair.getPassengerYaw() - chair.getYaw()) * 0.017453292f);
                }
                if (passengerRotationPitch != null) {
                    passengerRotationPitch.setRotateAngleX(chair.getPassengerPitch() * 0.017453292f);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationReciprocate() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper xReciprocate = modelMap.get("xReciprocate");
                ModelRendererWrapper yReciprocate = modelMap.get("yReciprocate");
                ModelRendererWrapper zReciprocate = modelMap.get("zReciprocate");

                if (xReciprocate != null) {
                    xReciprocate.setRotateAngleX((float) (Math.cos(ageInTicks * 0.3) * 0.2));
                }
                if (yReciprocate != null) {
                    yReciprocate.setRotateAngleY((float) (Math.cos(ageInTicks * 0.3) * 0.2));
                }
                if (zReciprocate != null) {
                    zReciprocate.setRotateAngleZ((float) (Math.cos(ageInTicks * 0.3) * 0.2));
                }
            }
        };
    }


    public static IAnimation<EntityLivingBase> getBaseRotationXH() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper xRotationHighA = modelMap.get("xRotationHighA");
                if (xRotationHighA != null) {
                    xRotationHighA.setRotateAngleX((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationHighB = modelMap.get("xRotationHighB");
                if (xRotationHighB != null) {
                    xRotationHighB.setRotateAngleX((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationHighC = modelMap.get("xRotationHighC");
                if (xRotationHighC != null) {
                    xRotationHighC.setRotateAngleX((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationHighD = modelMap.get("xRotationHighD");
                if (xRotationHighD != null) {
                    xRotationHighD.setRotateAngleX((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationHighE = modelMap.get("xRotationHighE");
                if (xRotationHighE != null) {
                    xRotationHighE.setRotateAngleX((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationXN() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netNeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper xRotationNormalA = modelMap.get("xRotationNormalA");
                if (xRotationNormalA != null) {
                    xRotationNormalA.setRotateAngleX((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationNormalB = modelMap.get("xRotationNormalB");
                if (xRotationNormalB != null) {
                    xRotationNormalB.setRotateAngleX((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationNormalC = modelMap.get("xRotationNormalC");
                if (xRotationNormalC != null) {
                    xRotationNormalC.setRotateAngleX((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationNormalD = modelMap.get("xRotationNormalD");
                if (xRotationNormalD != null) {
                    xRotationNormalD.setRotateAngleX((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationNormalE = modelMap.get("xRotationNormalE");
                if (xRotationNormalE != null) {
                    xRotationNormalE.setRotateAngleX((float) (ageInTicks % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationXL() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper xRotationLowA = modelMap.get("xRotationLowA");
                if (xRotationLowA != null) {
                    xRotationLowA.setRotateAngleX((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationLowB = modelMap.get("xRotationLowB");
                if (xRotationLowB != null) {
                    xRotationLowB.setRotateAngleX((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationLowC = modelMap.get("xRotationLowC");
                if (xRotationLowC != null) {
                    xRotationLowC.setRotateAngleX((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationLowD = modelMap.get("xRotationLowD");
                if (xRotationLowD != null) {
                    xRotationLowD.setRotateAngleX((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper xRotationLowE = modelMap.get("xRotationLowE");
                if (xRotationLowE != null) {
                    xRotationLowE.setRotateAngleX((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationYH() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper yRotationHighA = modelMap.get("yRotationHighA");
                if (yRotationHighA != null) {
                    yRotationHighA.setRotateAngleY((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationHighB = modelMap.get("yRotationHighB");
                if (yRotationHighB != null) {
                    yRotationHighB.setRotateAngleY((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationHighC = modelMap.get("yRotationHighC");
                if (yRotationHighC != null) {
                    yRotationHighC.setRotateAngleY((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationHighD = modelMap.get("yRotationHighD");
                if (yRotationHighD != null) {
                    yRotationHighD.setRotateAngleY((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationHighE = modelMap.get("yRotationHighE");
                if (yRotationHighE != null) {
                    yRotationHighE.setRotateAngleY((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationYN() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netNeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper yRotationNormalA = modelMap.get("yRotationNormalA");
                if (yRotationNormalA != null) {
                    yRotationNormalA.setRotateAngleY((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationNormalB = modelMap.get("yRotationNormalB");
                if (yRotationNormalB != null) {
                    yRotationNormalB.setRotateAngleY((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationNormalC = modelMap.get("yRotationNormalC");
                if (yRotationNormalC != null) {
                    yRotationNormalC.setRotateAngleY((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationNormalD = modelMap.get("yRotationNormalD");
                if (yRotationNormalD != null) {
                    yRotationNormalD.setRotateAngleY((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationNormalE = modelMap.get("yRotationNormalE");
                if (yRotationNormalE != null) {
                    yRotationNormalE.setRotateAngleY((float) (ageInTicks % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationYL() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper yRotationLowA = modelMap.get("yRotationLowA");
                if (yRotationLowA != null) {
                    yRotationLowA.setRotateAngleY((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationLowB = modelMap.get("yRotationLowB");
                if (yRotationLowB != null) {
                    yRotationLowB.setRotateAngleY((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationLowC = modelMap.get("yRotationLowC");
                if (yRotationLowC != null) {
                    yRotationLowC.setRotateAngleY((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationLowD = modelMap.get("yRotationLowD");
                if (yRotationLowD != null) {
                    yRotationLowD.setRotateAngleY((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper yRotationLowE = modelMap.get("yRotationLowE");
                if (yRotationLowE != null) {
                    yRotationLowE.setRotateAngleY((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationZH() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper zRotationHighA = modelMap.get("zRotationHighA");
                if (zRotationHighA != null) {
                    zRotationHighA.setRotateAngleZ((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationHighB = modelMap.get("zRotationHighB");
                if (zRotationHighB != null) {
                    zRotationHighB.setRotateAngleZ((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationHighC = modelMap.get("zRotationHighC");
                if (zRotationHighC != null) {
                    zRotationHighC.setRotateAngleZ((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationHighD = modelMap.get("zRotationHighD");
                if (zRotationHighD != null) {
                    zRotationHighD.setRotateAngleZ((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationHighE = modelMap.get("zRotationHighE");
                if (zRotationHighE != null) {
                    zRotationHighE.setRotateAngleZ((float) ((ageInTicks * 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationZN() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netNeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper zRotationNormalA = modelMap.get("zRotationNormalA");
                if (zRotationNormalA != null) {
                    zRotationNormalA.setRotateAngleZ((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationNormalB = modelMap.get("zRotationNormalB");
                if (zRotationNormalB != null) {
                    zRotationNormalB.setRotateAngleZ((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationNormalC = modelMap.get("zRotationNormalC");
                if (zRotationNormalC != null) {
                    zRotationNormalC.setRotateAngleZ((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationNormalD = modelMap.get("zRotationNormalD");
                if (zRotationNormalD != null) {
                    zRotationNormalD.setRotateAngleZ((float) (ageInTicks % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationNormalE = modelMap.get("zRotationNormalE");
                if (zRotationNormalE != null) {
                    zRotationNormalE.setRotateAngleZ((float) (ageInTicks % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getBaseRotationZL() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper zRotationLowA = modelMap.get("zRotationLowA");
                if (zRotationLowA != null) {
                    zRotationLowA.setRotateAngleZ((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationLowB = modelMap.get("zRotationLowB");
                if (zRotationLowB != null) {
                    zRotationLowB.setRotateAngleZ((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationLowC = modelMap.get("zRotationLowC");
                if (zRotationLowC != null) {
                    zRotationLowC.setRotateAngleZ((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationLowD = modelMap.get("zRotationLowD");
                if (zRotationLowD != null) {
                    zRotationLowD.setRotateAngleZ((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }

                ModelRendererWrapper zRotationLowE = modelMap.get("zRotationLowE");
                if (zRotationLowE != null) {
                    zRotationLowE.setRotateAngleZ((float) ((ageInTicks / 4) % 360 * 0.017453292));
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getNewYear() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper newYearShow = modelMap.get("newYearShow");
                ModelRendererWrapper newYearHidden = modelMap.get("newYearHidden");

                Calendar calendar = Calendar.getInstance();
                int month = calendar.get(Calendar.MONTH);
                int dayInMonth = calendar.get(Calendar.DAY_OF_MONTH);
                boolean isNewYear = month == Calendar.JANUARY && dayInMonth == 1;
                if (newYearShow != null) {
                    newYearShow.setHidden(!isNewYear);
                }
                if (newYearHidden != null) {
                    newYearHidden.setHidden(isNewYear);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getChristmas() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper christmasShow = modelMap.get("christmasShow");
                ModelRendererWrapper christmasHidden = modelMap.get("christmasHidden");

                Calendar calendar = Calendar.getInstance();
                int month = calendar.get(Calendar.MONTH);
                int dayInMonth = calendar.get(Calendar.DAY_OF_MONTH);
                boolean isChristmas = month == Calendar.DECEMBER && (dayInMonth == 24 || dayInMonth == 25);
                if (christmasShow != null) {
                    christmasShow.setHidden(!isChristmas);
                }
                if (christmasHidden != null) {
                    christmasHidden.setHidden(isChristmas);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getSpringFestival() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper springFestivalShow = modelMap.get("springFestivalShow");
                ModelRendererWrapper springFestivalHidden = modelMap.get("springFestivalHidden");

                String date = DateFormatUtils.format(new Date(), "yyyy-MM-dd");
                // 官方的春节假期是农历年三十到初六
                // 但是有的腊月没有三十……所以我们从廿九算起
                boolean isSpringFestival = SPRING_FESTIVAL.contains(date);
                if (springFestivalShow != null) {
                    springFestivalShow.setHidden(!isSpringFestival);
                }
                if (springFestivalHidden != null) {
                    springFestivalHidden.setHidden(isSpringFestival);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getDuanwu() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper duanwuShow = modelMap.get("duanwuShow");
                ModelRendererWrapper duanwuHidden = modelMap.get("duanwuHidden");

                String date = DateFormatUtils.format(new Date(), "yyyy-MM-dd");
                boolean isDuanwu = DUANWU.contains(date);
                if (duanwuShow != null) {
                    duanwuShow.setHidden(!isDuanwu);
                }
                if (duanwuHidden != null) {
                    duanwuHidden.setHidden(isDuanwu);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getMidAutumn() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper midAutumnShow = modelMap.get("midAutumnShow");
                ModelRendererWrapper midAutumnHidden = modelMap.get("midAutumnHidden");

                String date = DateFormatUtils.format(new Date(), "yyyy-MM-dd");
                boolean isMidAutumn = MID_AUTUMN.contains(date);
                if (midAutumnShow != null) {
                    midAutumnShow.setHidden(!isMidAutumn);
                }
                if (midAutumnHidden != null) {
                    midAutumnHidden.setHidden(isMidAutumn);
                }
            }
        };
    }

    public static IAnimation<EntityLivingBase> getRandomSelect() {
        return new IAnimation<EntityLivingBase>() {
            @Override
            public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netLeadYaw, float headPitch, float scaleFactor, EntityLivingBase entity, HashMap<String, ModelRendererWrapper> modelMap) {
                ModelRendererWrapper[] randomSelectUncheck = new ModelRendererWrapper[]{modelMap.get("randomSelect1"), modelMap.get("randomSelect2"), modelMap.get("randomSelect3"), modelMap.get("randomSelect4"), modelMap.get("randomSelect5")};
                ModelRendererWrapper[] randomSelect = Arrays.stream(randomSelectUncheck).filter(Objects::nonNull).toArray(ModelRendererWrapper[]::new);
                long index = Math.abs(entity.getUniqueID().getLeastSignificantBits()) % randomSelect.length;
                for (int i = 0; i < randomSelect.length; i++) {
                    randomSelect[i].setHidden(i != index);
                }
            }
        };
    }

    public static void playerRidingPosture(ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        if (legLeft != null) {
            legLeft.setRotateAngleX(-1.4f);
            legLeft.setRotateAngleY(-0.4f);
        }

        if (legRight != null) {
            legRight.setRotateAngleX(-1.4f);
            legRight.setRotateAngleY(0.4f);
        }

        GlStateManager.translate(0, 0.3, 0);
    }

    public static void playerSittingPosture(ModelRendererWrapper armLeft, ModelRendererWrapper armRight, ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        if (armLeft != null) {
            armLeft.setRotateAngleX(-0.798f);
            armLeft.setRotateAngleZ(0.274f);
        }

        if (armRight != null) {
            armRight.setRotateAngleX(-0.798f);
            armRight.setRotateAngleZ(-0.274f);
        }

        ridingPosture(legLeft, legRight);
    }

    public static void playerRidingBroomPosture(ModelRendererWrapper head, ModelRendererWrapper armLeft, ModelRendererWrapper armRight, ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        sittingPosture(armLeft, armRight, legLeft, legRight);
        if (head != null) {
            head.setRotateAngleX((float) (head.getRotateAngleX() - 30 * Math.PI / 180));
            head.setOffsetY(0.0625f);
        }

        GlStateManager.rotate(30, 1, 0, 0);
        GlStateManager.translate(0, -0.45, -0.3);
    }

    public static boolean isRidingMarisaBroom(EntityMaid maid) {
        return maid.getControllingPassenger() instanceof EntityMarisaBroom || maid.isDebugBroomShow;
    }

    public static void ridingPosture(ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        if (legLeft != null) {
            legLeft.setRotateAngleX(-1.134f);
            legLeft.setRotateAngleZ(-0.262f);
        }
        if (legRight != null) {
            legRight.setRotateAngleX(-1.134f);
            legRight.setRotateAngleZ(0.262f);
        }
        GlStateManager.translate(0, 0.3, 0);
    }

    public static void sittingPosture(ModelRendererWrapper armLeft, ModelRendererWrapper armRight, ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        if (armLeft != null) {
            armLeft.setRotateAngleX(-0.798f);
            armLeft.setRotateAngleZ(0.274f);
        }
        if (armRight != null) {
            armRight.setRotateAngleX(-0.798f);
            armRight.setRotateAngleZ(-0.274f);
        }
        ridingPosture(legLeft, legRight);
    }

    public static void sittingNoLegPosture(ModelRendererWrapper armLeft, ModelRendererWrapper armRight) {
        if (armLeft != null) {
            armLeft.setRotateAngleX(-0.798f);
            armLeft.setRotateAngleZ(0.274f);
        }
        if (armRight != null) {
            armRight.setRotateAngleX(-0.798f);
            armRight.setRotateAngleZ(-0.274f);
        }
    }

    public static void ridingBroomPosture(ModelRendererWrapper head, ModelRendererWrapper armLeft, ModelRendererWrapper armRight, ModelRendererWrapper legLeft, ModelRendererWrapper legRight) {
        sittingPosture(armLeft, armRight, legLeft, legRight);
        if (head != null) {
            head.setRotateAngleX((float) (head.getRotateAngleX() - 30 * Math.PI / 180));
            head.setOffsetY(0.0625f);
        }
        GlStateManager.rotate(30, 1, 0, 0);
        GlStateManager.translate(0, -0.4, -0.3);
    }

    public static boolean isPortableAudioPlay(EntityMaid maid) {
        if (maid.getControllingPassenger() instanceof EntityPortableAudio) {
            EntityPortableAudio audio = (EntityPortableAudio) maid.getControllingPassenger();
            return audio.isPlaying();
        }
        return false;
    }

    public static boolean isHoldTrolley(EntityMaid maid) {
        return maid.getControllingPassenger() instanceof AbstractEntityTrolley;
    }

    public static boolean isHoldVehicle(EntityMaid maid) {
        return maid.getControllingPassenger() instanceof EntityMaidVehicle;
    }

    public static boolean isSwingLeftHand(EntityMaid maid) {
        return maid.swingingHand == EnumHand.OFF_HAND;
    }

    public static float[] getLeftHandRotation(EntityMaid maid) {
        if (maid.getControllingPassenger() instanceof EntityMaidVehicle) {
            return ((EntityMaidVehicle) maid.getControllingPassenger()).getMaidHandRotation(EnumHand.OFF_HAND);
        }
        return new float[]{0, 0, 0};
    }

    public static float[] getRightHandRotation(EntityMaid maid) {
        if (maid.getControllingPassenger() instanceof EntityMaidVehicle) {
            return ((EntityMaidVehicle) maid.getControllingPassenger()).getMaidHandRotation(EnumHand.MAIN_HAND);
        }
        return new float[]{0, 0, 0};
    }

    public static HashMap<ResourceLocation, IAnimation<?>> getInnerAnimation() {
        return INNER_ANIMATION;
    }

    public static void init() {
        INNER_ANIMATION.clear();
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/arm/default.js"), getArmDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/arm/extra.js"), getArmExtra());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/arm/swing.js"), getArmSwing());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/arm/vertical.js"), getArmVertical());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/default.js"), getArmorDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/reverse.js"), getArmorReverse());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/temp/cold.js"), getArmorTempCold());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/temp/medium.js"), getArmorTempMedium());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/temp/ocean.js"), getArmorTempOcean());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/temp/warm.js"), getArmorTempWarm());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/value/value_full.js"), getArmorValueFull());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/value/value_high.js"), getArmorValueHigh());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/value/value_low.js"), getArmorValueLow());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/value/value_normal.js"), getArmorValueNormal());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/weather/raining.js"), getArmorWeatherRaining());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/armor/weather/thundering.js"), getArmorWeatherThundering());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/beg.js"), getHeadBeg());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/blink.js"), getHeadBlink());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/default.js"), getHeadDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/extra.js"), getHeadExtra());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/hurt.js"), getHeadHurt());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/music_shake.js"), getHeadMusicShake());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/ear_shake.js"), getEarShake());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/ear_beg_shake.js"), getEarBegShake());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/hair_swing.js"), getHairSwing());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/hair_ponytail_swing.js"), getHairPonytailSwing());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/head/reverse_blink.js"), getHeadReverseBlink());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/leg/default.js"), getLegDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/leg/extra.js"), getLegExtra());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/leg/vertical.js"), getLegVertical());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sit/default.js"), getSitDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sit/no_leg.js"), getSitNoLeg());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sit/skirt_hidden.js"), getSitSkirtHidden());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sit/skirt_rotation.js"), getSitSkirtRotation());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sit/skirt_rotation_swing.js"), getSitSkirtRotationSwing());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/health/less_show.js"), getHealthLessShow());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/health/more_show.js"), getHealthMoreShow());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/health/rotation.js"), getHealthRotation());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/status/backpack.js"), getStatusBackpack());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/status/backpack_level.js"), getStatusBackpackLevel());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/status/sasimono.js"), getStatusSasimono());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/tail/default.js"), getTailDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/attack.js"), getTaskAttack());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/danmaku_attack.js"), getTaskDanmakuAttack());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/farm.js"), getTaskFarm());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/feed_animal.js"), getTaskFeedAnimal());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/idle.js"), getTaskIdle());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/milk.js"), getTaskMilk());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/shears.js"), getTaskShears());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/sugar_cane.js"), getTaskSugarCane());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/cocoa.js"), getTaskCocoa());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/extinguishing.js"), getTaskExtinguishing());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/feed.js"), getTaskFeed());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/grass.js"), getTaskGrass());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/melon.js"), getTaskMelon());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/ranged_attack.js"), getTaskRangedAttack());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/snow.js"), getTaskSnow());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/task/torch.js"), getTaskTorch());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/wing/default.js"), getWingDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/wing/default.js"), getWingDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/default/sleep/default.js"), getSleepDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/player/arm/default.js"), getPlayerArmDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid/player/sit/default.js"), getPlayerSitDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/maid.default.js"), getMaidDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/special/hecatia_dimension.js"), getSpecialHecatia());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/special/wakasagihime_sit.js"), getSpecialWakasagihime());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/chair/passenger/hidden.js"), getPassengerHidden());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/chair/passenger/rotation.js"), getPassengerRotation());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/dimension/default.js"), getBaseDimDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/float/default.js"), getBaseFloatDefault());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/time/day_night_hidden.js"), getBaseTimeDayNight());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/time/game_rotation.js"), getBaseTimeGameRotation());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/time/system_rotation.js"), getBaseTimeSysRotation());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/reciprocate.js"), getBaseRotationReciprocate());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/x_high_speed.js"), getBaseRotationXH());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/x_normal_speed.js"), getBaseRotationXN());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/x_low_speed.js"), getBaseRotationXL());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/y_high_speed.js"), getBaseRotationYH());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/y_normal_speed.js"), getBaseRotationYN());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/y_low_speed.js"), getBaseRotationYL());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/z_high_speed.js"), getBaseRotationZH());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/z_normal_speed.js"), getBaseRotationZN());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/rotation/z_low_speed.js"), getBaseRotationZL());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/festival/new_year.js"), getNewYear());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/festival/christmas.js"), getChristmas());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/festival/spring_festival.js"), getSpringFestival());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/festival/duanwu.js"), getDuanwu());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/festival/mid_autumn.js"), getMidAutumn());
        INNER_ANIMATION.put(new ResourceLocation("touhou_little_maid:animation/base/random/select.js"), getRandomSelect());
    }
}
